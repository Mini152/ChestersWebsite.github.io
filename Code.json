{
    "code": [
        {
            "identifier": "indexHTML",
            "content": "<!-- DISCLAMER:\n<id>HTML and CSS are not my strong point I've tried here but I apologise for any messy\n<id>formatting and bad code.\n<id>thx, chester\n-->\n<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><script defer src=<qu>index.js<qu>></script>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./index.css<qu>>\n<id><title>Mini152</title>\n</head>\n<body id=<qu>body<qu>>\n<id><div class=<qu>divTop<qu>>\n<id><id><canvas id=<qu>canvMenu<qu>></canvas>\n<id><id><!-- games dropdown menu -->\n<id><id><div id=<qu>divGamesDropdown<qu>>\n<id><id><id><button class=<qu>btnDrop<qu>>\n<id><id><id><id><span style=<qu>color: #86C232;<qu>>• </span><id><id>\n<id><id><id><id><span>Games</span>\n<id><id><id><id><span style=<qu>color: #86C232;<qu>> •</span>\n<id><id><id></button>\n<id><id><id><div class=<qu>dropdown-content<qu>>\n<id><id><id><id><a href=<qu>Draw.html<qu>>Draw</a>\n<id><id><id><id><a href=<qu>Noughts&Crosses.html<qu>>Noughts & Crosses</a>\n<id><id><id><id><a href=<qu>Grid Game.html<qu>>Grid Game</a>\n<id><id><id><id><a href=<qu>Pong.html<qu>>Pong</a>\n<id><id><id><id><a href=<qu>Snake.html<qu>>Snake</a>\n<id><id><id><id><a href=<qu>FlappyBirb.html<qu>>Flappy Birb</a>\n<id><id><id><id><a href=<qu>Tetris.html<qu>>Tetris</a>\n<id><id><id></div>\n<id><id></div>\n<id><id><!-- utility dropdown menu -->\n<id><id><div id=<qu>divUtilityDropdown<qu>>\n<id><id><id><button class=<qu>btnDrop<qu>>\n<id><id><id><id><span style=<qu>color: #86C232;<qu>>• </span>\n<id><id><id><id><span>Utility</span>\n<id><id><id><id><span style=<qu>color: #86C232;<qu>> •</span>\n<id><id><id></button>\n<id><id><id><div class=<qu>dropdown-content<qu>>\n<id><id><id><id><a href=<qu>Calendar.html<qu>>Calendar</a>\n<id><id><id><id><a href=<qu>3DSim.html<qu>>3D Simulator</a>\n<id><id><id><id><a href=<qu>Picker.html<qu>>Picker</a>\n<id><id><id><id><a href=<qu>Reaction Time.html<qu>>Reaction Time</a>\n<id><id><id></div>\n<id><id></div>\n<id><id><!--<img id=<qu>imgTitle<qu> src=<qu>assets/Header.png<qu>>-->\n<id><id><canvas id=<qu>canvTitle<qu>></canvas>\n<id><id><!-- code button -->\n<id><id><button id=<qu>btnCode<qu>>\n<id><id><id><span style=<qu>color: #86C232;<qu>>• </span><id>\n<id><id><id><span>Code</span>\n<id><id><id><span style=<qu>color: #86C232;<qu>> •</span>\n<id><id></button>\n<id><id><!-- about button -->\n<id><id><button id=<qu>btnAbout<qu>>\n<id><id><id><span style=<qu>color: #86C232;<qu>>• </span>\n<id><id><id><span>About</span>\n<id><id><id><span style=<qu>color: #86C232;<qu>> •</span>\n<id><id></button>\n<id><id><!-- settings -->\n<id><id><img id=<qu>imgSettings<qu> src=<qu>assets/Cog.png<qu>>\n<id></div>\n<id><div id=<qu>divMenu<qu>>\n<id><id><canvas id=<qu>canvInMenu<qu>></canvas>\n<id><id><div class=<qu>divMenu-content<qu>>\n<id><id><id><div class=<qu>divMenuGames<qu>>\n<id><id><id><id><label class=<qu>lblMenuGames<qu>>Games</label>\n<id><id><id><id><button id=<qu>btnMenuGames<qu>>-</button>\n<id><id><id></div>\n<id><id><id><div id=<qu>divMenuGames-content<qu>>\n<id><id><id><id><a href=<qu>Draw.html<qu>>Draw</a>\n<id><id><id><id><a href=<qu>Noughts&Crosses.html<qu>>Noughts & Crosses</a>\n<id><id><id><id><a href=<qu>Grid Game.html<qu>>Grid Game</a>\n<id><id><id><id><a href=<qu>Pong.html<qu>>Pong</a>\n<id><id><id><id><a href=<qu>Snake.html<qu>>Snake</a>\n<id><id><id><id><a href=<qu>FlappyBirb.html<qu>>Flappy Birb</a>\n<id><id><id><id><a href=<qu>Tetris.html<qu>>Tetris</a>\n<id><id><id></div>\n<id><id><id><div class=<qu>divMenuUtility<qu>>\n<id><id><id><id><label class=<qu>lblMenuUtility<qu>>Utility</label>\n<id><id><id><id><button id=<qu>btnMenuUtility<qu>>-</button>\n<id><id><id></div>\n<id><id><id><div id=<qu>divMenuUtility-content<qu>>\n<id><id><id><id><a href=<qu>Calendar.html<qu>>Calendar</a>\n<id><id><id><id><a href=<qu>3DSim.html<qu>>3D Simulator</a>\n<id><id><id><id><a href=<qu>Picker.html<qu>>Picker</a>\n<id><id><id><id><a href=<qu>Reaction Time.html<qu>>Reaction Time</a>\n<id><id><id></div>\n<id><id><id><div class=<qu>divMenuOther<qu>>\n<id><id><id><id><a href=<qu>#<qu> class=<qu>btnMenuOther<qu>>Code</a>\n<id><id><id><id><a href=<qu>#<qu> class=<qu>btnMenuOther<qu>>About</a><id><id><id><id>\n<id><id><id></div>\n<id><id></div>\n<id></div>\n<id><div id=<qu>divSettings<qu>>\n<id><id><img id=<qu>imgInSettings<qu> src=<qu>assets/Cog.png<qu>>\n<id><id><div class=<qu>divSettings-content<qu>>\n<id><id><id><div class=<qu>divBackgroundChange<qu>>\n<id><id><id><id><div class=<qu>divBackgroundChangeTitle<qu>>\n<id><id><id><id><id><label class=<qu>lblBackgroundChangeTitle<qu>>Change Background</label>\n<id><id><id><id></div>\n<id><id><id><id><div>\n<id><id><id><id><id><label class=<qu>lblInputTitle<qu>>Number Of Points</label>\n<id><id><id><id><id><input class=<qu>txtBackgroundChangeInput<qu> id=<qu>txtNoOfPoints<qu> value=<qu>100<qu> type=<qu>text<qu>>\n<id><id><id><id></div>\n<id><id><id><id><div>\n<id><id><id><id><id><label class=<qu>lblInputTitle<qu>>Links Between Points</label>\n<id><id><id><id><id><input class=<qu>txtBackgroundChangeInput<qu> id=<qu>txtLinks<qu> value=<qu>3<qu> type=<qu>text<qu>>\n<id><id><id><id></div>\n<id><id><id><id><div>\n<id><id><id><id><id><label class=<qu>lblInputTitle<qu>>Anchors</label>\n<id><id><id><id><id><input class=<qu>txtBackgroundChangeInput<qu> id=<qu>txtAnchors<qu> value=<qu>20<qu> type=<qu>text<qu>>\n<id><id><id><id></div>\n<id><id><id><id><div>\n<id><id><id><id><id><label class=<qu>lblInputTitle<qu>>Distance (pixels)</label>\n<id><id><id><id><id><input class=<qu>txtBackgroundChangeInput<qu> id=<qu>txtDistance<qu> value=<qu>100<qu> type=<qu>text<qu>>\n<id><id><id><id></div>\n<id><id><id><id><div>\n<id><id><id><id><id><label class=<qu>lblInputTitle<qu>>Time To Change (ms)</label>\n<id><id><id><id><id><input class=<qu>txtBackgroundChangeInput<qu> id=<qu>txtTimeToChange<qu> value=<qu>5000<qu> type=<qu>text<qu>>\n<id><id><id><id></div>\n<id><id><id><id><button id=<qu>btnReloadBackground<qu>>Reload Background</button>\n<id><id><id><id><button id=<qu>btnResetBackground<qu>>Reset</button>\n<id><id><id></div>\n<id><id></div>\n<id></div>\n<id><canvas id=<qu>canvas<qu>></canvas>\n</body>\n</html>\n"            
        },
        {
            "identifier": "indexCSS",
            "content": "/* DISCLAMER:\n<id>HTML and CSS are not my strong point I've tried here but I apologise for any messy\n<id>formatting and bad code.\n<id>thx, chester\n*/\n\n#body {\n<id>background-color: #222629;\n<id>margin: 0;\n}\n\n/* top div */\n/* -------------------------------------- */\n\n.divTop {\n<id>width: 100%;\n<id>height: 100px;\n<id>text-align: center;\n<id>background: none;\n<id>position: absolute;\n<id>z-index: 2;\n}\n\n#canvMenu {\n<id>width: 40px;\n<id>height: 40px;\n<id>float: left;\n<id>position: relative;\n<id>left: 30px;\n<id>top: 30px;\n<id>background: none;\n<id>cursor: pointer;\n}\n\n/* dropdown menu buttons */\n\n.btnDrop {\n<id>background: none;\n<id>cursor: pointer;\n<id>color: #FFFFFF;\n<id>padding: 10px;\n<id>font-family: 'Trebuchet MS';\n<id>font-size: 16px;\n<id>width: 100px;\n<id>border: none;\n}\n\n/* The container <div> - needed to position the dropdown content */\n\n#divGamesDropdown  {\n<id>position: relative;\n<id>display: inline-block;\n<id>bottom: 45px;\n<id>right: 0%;\n}\n\n#divUtilityDropdown  {\n<id>position: relative;\n<id>display: inline-block;\n<id>bottom: 45px;\n<id>right: 0%;\n}\n\n/* Dropdown Content (Hidden by Default) */\n.dropdown-content {\n<id>display: none;\n<id>position: absolute;\n<id>background-color: #222629;\n<id>min-width: 160px;\n<id>box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n<id>z-index: 1;\n<id>border: 1px solid #86C232;\n}\n\n/* Links inside the dropdown */\n.dropdown-content a {\n<id>color: #FFFFFF;\n<id>padding: 12px 16px;\n<id>text-decoration: none;\n<id>display: block;\n}\n\n/* Change color of dropdown links on hover */\n.dropdown-content a:hover {\n<id>color: #86C232;\n}\n\n/* Show the dropdown menu on hover */\n#divGamesDropdown:hover .dropdown-content {\n<id>display: block;\n}\n\n/* Show the dropdown menu on hover */\n#divUtilityDropdown:hover .dropdown-content {\n<id>display: block;\n}\n\n/* Change the background color of the dropdown button when the dropdown content is shown, removes bottom border so double border is not shown */\n#divGamesDropdown:hover .btnDrop {\n<id>border: 1px solid #86C232;\n<id>border-bottom: none;\n}\n\n/* Change the background color & border of the dropdown button when the dropdown content is shown */\n#divUtilityDropdown:hover .btnDrop {\n<id>border: 1px solid #86C232;\n<id>border-bottom: none;\n}\n\n/* -------------------------------------- */\n/* title */\n\n#imgTitle {\n<id>width: 400px;\n<id>height: 100px;\n}\n\n#canvTitle {\n<id>width: 400px;\n<id>height: 100px;\n<id>background: none;\n}\n\n/* other btns */\n/* -------------------------------------- */\n#btnCode {\n<id>background: none;\n<id>cursor: pointer;\n<id>color: #FFFFFF;\n<id>padding: 10px;\n<id>font-family: 'Trebuchet MS';\n<id>font-size: 16px;\n<id>/* border: 1px solid #86C232; */\n<id>border: none;\n<id>width: 100px;\n<id>position: relative;\n<id>bottom: 45px;\n<id>left: 0%;\n}\n\n#btnCode:hover {\n<id>border: 1px solid #86C232;\n}\n\n#btnAbout {\n<id>background: none;\n<id>cursor: pointer;\n<id>color: #FFFFFF;\n<id>padding: 10px;\n<id>font-family: 'Trebuchet MS';\n<id>font-size: 16px;\n<id>/* border: 1px solid #86C232; */\n<id>border: none;\n<id>width: 100px;\n<id>position: relative;\n<id>bottom: 45px;\n<id>left: 0%;\n}\n\n#btnAbout:hover {\n<id>border: 1px solid #86C232;\n}\n\n#imgSettings {\n<id>width: 40px;\n<id>height: 40px;\n<id>float: right;\n<id>position: relative;\n<id>right: 30px;\n<id>top: 30px;\n<id>background: none;\n<id>cursor: pointer;\n}\n\n/* menu */\n\n#divMenu {\n<id>height: 100%;\n<id>width: 350px;\n<id>position: absolute;\n<id>background-color: #222629;\n<id>border-right: 1px solid #86C232;\n<id>z-index: 3;\n<id>visibility: hidden;\n}\n\n#canvInMenu {\n<id>width: 40px;\n<id>height: 40px;\n<id>float: left;\n<id>position: relative;\n<id>left: 30px;\n<id>top: 30px;\n<id>background-color: #222629;\n<id>cursor: pointer;\n}\n\n.divMenu-content {\n<id>position: relative;\n<id>top: 80px;\n<id>float: left;\n}\n\n/* games */\n\n.divMenuGames {\n<id>position: relative;\n<id>width: 300px;\n<id>padding-bottom: 10px;\n<id>border-bottom: 1px solid #86C232;\n}\n\n.lblMenuGames {\n<id>font-size: 25px;\n<id>color: #FFFFFF;\n}\n\n#btnMenuGames {\n<id>background: none;\n<id>color: #86C232;\n<id>border: 1px solid #86C232;\n<id>cursor: pointer;\n<id>position: relative;\n<id>float: right;\n<id>right: 10px;\n<id>width: 30px;\n<id>height: 30px;\n}\n\n#divMenuGames-content {\n<id>display: block;\n}\n\n#divMenuGames-content a {\n<id>color: #FFFFFF;\n<id>padding: 12px 16px;\n<id>text-decoration: none;\n<id>display: block;\n}\n\n#divMenuGames-content a:hover {\n<id>color: #86C232;   \n}\n\n/* utility */\n\n.divMenuUtility {\n<id>position: relative;\n<id>width: 300px;\n<id>padding-bottom: 10px;\n<id>border-bottom: 1px solid #86C232;\n}\n\n.lblMenuUtility {\n<id>font-size: 25px;\n<id>color: #FFFFFF;\n}\n\n#btnMenuUtility {\n<id>background: none;\n<id>color: #86C232;\n<id>border: 1px solid #86C232;\n<id>cursor: pointer;\n<id>position: relative;\n<id>float: right;\n<id>right: 10px;\n<id>width: 30px;\n<id>height: 30px;\n}\n\n#divMenuUtility-content {\n<id>display: block;\n}\n\n#divMenuUtility-content a {\n<id>color: #FFFFFF;\n<id>padding: 12px 16px;\n<id>text-decoration: none;\n<id>display: block;\n}\n\n#divMenuUtility-content a:hover {\n<id>color: #86C232;   \n}\n\n\n/* other menu buttons */\n\n.divMenuOther {\n<id>position: fixed;\n<id>bottom: 0;\n<id>width: 300px;\n<id>border-top: 1px solid #86C232;\n}\n\n.btnMenuOther {\n<id>position: relative;\n<id>background: none;\n<id>color: #FFFFFF;\n<id>border: none;\n<id>left: 15px;\n<id>padding-top: 5px;\n<id>padding-bottom: 10px;\n<id>text-decoration: none;\n<id>display: block;\n<id>cursor: pointer;\n<id>font-family: inherit;\n}\n\n.btnMenuOther:hover {\n<id>color: #86C232;\n}\n\n/* settings */\n\n#divSettings {\n<id>height: 100%;\n<id>width: 350px;\n<id>position: fixed;\n<id>right: 0;\n<id>background-color: #222629;\n<id>border-left: 1px solid #86C232;\n<id>z-index: 3;\n<id>visibility: hidden;\n}\n\n#imgInSettings {\n<id>width: 40px;\n<id>height: 40px;\n<id>position: fixed;\n<id>top: 30px;\n<id>right: 30px;\n<id>cursor: pointer;\n}\n\n.divSettings-content {\n<id>position: relative;\n<id>top: 80px;\n<id>left: 30px;\n<id>float: left;\n}\n\n.divBackgroundChange {\n<id>font-family: 'Times New Roman';\n}\n\n.divBackgroundChangeTitle {\n<id>position: relative;\n<id>width: 300px;\n<id>padding-bottom: 10px;\n<id>border-bottom: 1px solid #86C232;\n}\n\n.lblBackgroundChangeTitle {\n<id>font-size: 25px;\n<id>color: #FFFFFF;\n}\n\n.lblInputTitle {\n<id>color: #FFFFFF;\n<id>padding: 12px 16px;\n<id>text-decoration: none;\n<id>display: block;\n}\n\n.txtBackgroundChangeInput {\n<id>position: relative;\n<id>background: none;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>left: 10px;\n}\n\n#btnReloadBackground {\n<id>position: relative;\n<id>background: none;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>font-size: 16px;\n<id>padding: 12px 16px;\n<id>left: 10px;\n<id>top: 20px;\n<id>font-family: 'Times New Roman';\n<id>cursor: pointer;\n}\n\n#btnReloadBackground:hover {\n<id>color: #86C232;\n}\n\n#btnResetBackground {\n<id>position: relative;\n<id>background: none;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>font-size: 16px;\n<id>padding: 12px 16px;\n<id>left: 10px;\n<id>top: 20px;\n<id>font-family: 'Times New Roman';\n<id>cursor: pointer;\n}\n\n#btnResetBackground:hover {\n<id>color: #86C232;\n}\n\n/* background canvas */\n\n#canvas {\n<id>width: 100%;\n<id>height: 937px;\n<id>/*background: none;*/\n<id>background-color: #222629;\n<id>position: relative;\n<id>display: flex;\n<id>z-index: 1;\n}\n"
        },
        {
            "identifier": "indexJS",
            "content": "const body = document.getElementById(<qu>body<qu>);\n\n// scaling\n// -----------------------------------------\n\nfunction resizeWindow() {\n<id>var gamesOffset = <qu><qu>;\n<id>var utilityOffset = <qu><qu>;\n<id>var codeOffset = <qu><qu>;\n<id>var aboutOffset = <qu><qu>;\n<id>if (window.outerWidth > 1500) { // if window width is greater than 1500px\n<id><id>gamesOffset = <qu>16%<qu>; utilityOffset = <qu>8%<qu>; codeOffset = <qu>8%<qu>; aboutOffset = <qu>16%<qu>; // set the postions of the buttons and dropdowns to their widest values\n<id>} else if (window.outerWidth > 1300) { // else if window width is greater than 1500px \n<id><id>gamesOffset = <qu>10%<qu>; utilityOffset = <qu>5%<qu>; codeOffset = <qu>5%<qu>; aboutOffset = <qu>10%<qu>; // scale buttons and dropdowns accordingly\n<id>} else if (window.outerWidth > 1100) {\n<id><id>gamesOffset = <qu>6%<qu>; utilityOffset = <qu>3%<qu>; codeOffset = <qu>3%<qu>; aboutOffset = <qu>6%<qu>;\n<id>} else if (window.outerWidth > 1000) {\n<id><id>gamesOffset = <qu>2%<qu>; utilityOffset = <qu>1%<qu>; codeOffset = <qu>1%<qu>; aboutOffset = <qu>2%<qu>;<id>   \n<id>} else { // if window width is less than 1000px the minimum window width will take place\n<id><id>gamesOffset = <qu>0%<qu>; utilityOffset = <qu>0%<qu>; codeOffset = <qu>0%<qu>; aboutOffset = <qu>0%<qu>; // this will remove all postioning values and the buttons and dropdowns will be at their minimum\n<id>}\n<id>// setting postitons of the top buttons and dropdowns\n<id>document.getElementById(<qu>divGamesDropdown<qu>).style.right = gamesOffset;\n<id>document.getElementById(<qu>divUtilityDropdown<qu>).style.right = utilityOffset;\n<id>document.getElementById(<qu>btnCode<qu>).style.left = codeOffset;\n<id>document.getElementById(<qu>btnAbout<qu>).style.left = aboutOffset;<id>\n}\n\n// event listeners for when window resize is needed\nwindow.addEventListener(<qu>resize<qu>, resizeWindow);\nwindow.addEventListener(<qu>load<qu>, resizeWindow);\ndocument.addEventListener(<qu>fullscreenchange<qu>, resizeWindow);\nwindow.addEventListener(<qu>focus<qu>,  resizeWindow);\n\n// menu\n// -----------------------------------------\n\n// declaring menu canvs\nconst divMenu = document.getElementById(<qu>divMenu<qu>);\nconst canvMenu = document.getElementById(<qu>canvMenu<qu>);\nconst canvInMenu = document.getElementById(<qu>canvInMenu<qu>);\n\n// declaring menu divs and btns\nconst btnMenuGames = document.getElementById(<qu>btnMenuGames<qu>);\nconst btnMenuUtility = document.getElementById(<qu>btnMenuUtility<qu>);\nconst divMenuGamesContent = document.getElementById(<qu>divMenuGames-content<qu>);\nconst divMenuUtilityContent = document.getElementById(<qu>divMenuUtility-content<qu>);\n\n// bools for hidden menu info\nvar gamesHidden = false;\nvar utilityHidden = false;\n\n// toggles menu window\ncanvMenu.addEventListener(<qu>click<qu>, () => {\n<id>divMenu.style.visibility = <qu>visible<qu>; // show menu\n});\n\ncanvInMenu.addEventListener(<qu>click<qu>, () => {\n<id>divMenu.style.visibility = <qu>hidden<qu>; // hide menu\n});\n\n// make menu icons (the three lines)\nfunction makeIcons(canv) {\n<id>let canvas = document.getElementById(canv) // canvas element\n<id>let context  = canvas.getContext(<qu>2d<qu>); // context of canvas\n<id>context.fillStyle = <qu>#86C232<qu>; // fill colour green\n<id>// w - 290, h - 130\n<id>context.fillRect(10, 10, 280, 30); // creates the three lines for menu icon\n<id>context.fillRect(10, 60, 280, 30);\n<id>context.fillRect(10, 110, 280, 30);\n}\n\n// collapses the games displayed in the menu\nfunction toggleMenuGames() {\n<id>if (gamesHidden) { // if gamesHidden bool = true\n<id><id>btnMenuGames.innerText = <qu>-<qu>; // make btn innertext = -\n<id><id>divMenuGamesContent.style.display = <qu>block<qu>; // display games content\n<id><id>gamesHidden = false; // make gamesHidden false\n<id>} else {\n<id><id>btnMenuGames.innerText = <qu>+<qu>; // make btn innertext = +\n<id><id>divMenuGamesContent.style.display = <qu>none<qu>; // remove games content\n<id><id>gamesHidden = true; // make games hidden true\n<id>}\n}\n\n// collapses the utilities displayed in the menu\nfunction toggleMenuUtility() {\n<id>if (utilityHidden) { // if utilityHidden bool = true\n<id><id>btnMenuUtility.innerText = <qu>-<qu>; // make btn innertext = -\n<id><id>divMenuUtilityContent.style.display = <qu>block<qu>; // display utility content\n<id><id>utilityHidden = false; // make utilityHidden false\n<id>} else {\n<id><id>btnMenuUtility.innerText = <qu>+<qu>; // make btn innertext = +\n<id><id>divMenuUtilityContent.style.display = <qu>none<qu>; // remove utility content\n<id><id>utilityHidden = true; // make utilityHidden true\n<id>}\n}\n\n// toggles menu games and utility\nbtnMenuGames.addEventListener(<qu>click<qu>, toggleMenuGames);\nbtnMenuUtility.addEventListener(<qu>click<qu>, toggleMenuUtility);\n\n// draws the menu icon onto the canvas'\nmakeIcons(<qu>canvMenu<qu>);\nmakeIcons(<qu>canvInMenu<qu>);\n\n// settings\n// -----------------------------------------\n\nconst divSettings = document.getElementById(<qu>divSettings<qu>)\nconst imgSettings = document.getElementById(<qu>imgSettings<qu>);\nconst imgInSettings = document.getElementById(<qu>imgInSettings<qu>);\nconst btnReloadBackground = document.getElementById(<qu>btnReloadBackground<qu>);\nconst btnResetBackground = document.getElementById(<qu>btnResetBackground<qu>);\n\n// toggle settings div\nimgSettings.addEventListener(<qu>click<qu>, () => {\n<id>divSettings.style.visibility = <qu>visible<qu>;\n});\n\nimgInSettings.addEventListener(<qu>click<qu>, () => {\n<id>divSettings.style.visibility = <qu>hidden<qu>;\n});\n\nbtnReloadBackground.addEventListener(<qu>click<qu>, () => {\n<id>// validating inputs\n<id>// noOfPoints\n<id>var regex = new RegExp('^[0-9][0-9]?[0-9]?$|^1000$'); // regex to limit number of points to between 0 and 1000\n<id>if (!regex.test(document.getElementById(<qu>txtNoOfPoints<qu>).value)) {\n<id><id>alert(<qu>Number of points must a number between 0 and 1000<qu>);\n<id><id>return;\n<id>}\n\n<id>// links\n<id>regex = new RegExp('^[0-9]+$'); // regex to only allow numbers\n<id>if (!regex.test(document.getElementById(<qu>txtLinks<qu>).value)) { // links must be a positive number\n<id><id>alert(<qu>Links must be a number between 0 and <qu> + Math.floor(document.getElementById(<qu>txtNoOfPoints<qu>).value / 20));\n<id><id>return;\n<id>}\n<id>if (document.getElementById(<qu>txtLinks<qu>).value > Math.floor(document.getElementById(<qu>txtNoOfPoints<qu>).value / 20)) { // links must be less than 5% of the number of points\n<id><id>alert(<qu>Links must be a number between 0 and <qu> + Math.floor(document.getElementById(<qu>txtNoOfPoints<qu>).value / 20));\n<id><id>return;\n<id>}\n\n<id>// anchors\n<id>if (!regex.test(document.getElementById(<qu>txtAnchors<qu>).value)) { // anchor must be a positive number\n<id><id>alert(<qu>Anchors must be a number between 0 and <qu> + Math.floor(document.getElementById(<qu>txtNoOfPoints<qu>).value));\n<id><id>return;\n<id>}\n<id>if (document.getElementById(<qu>txtAnchors<qu>).value > Math.floor(document.getElementById(<qu>txtNoOfPoints<qu>).value)) { // anchor must be less than or equal to the number of points\n<id><id>alert(<qu>Anchors must be a number between 0 and <qu> + Math.floor(document.getElementById(<qu>txtNoOfPoints<qu>).value));\n<id><id>return;\n<id>}\n\n<id>// distance\n<id>if (!regex.test(document.getElementById(<qu>txtDistance<qu>).value)) { // distance must be a positive number\n<id><id>alert(<qu>Distance must be a number greater than or equal to 0<qu>);\n<id><id>return;\n<id>}\n\n<id>// timeToChange\n<id>if (!regex.test(document.getElementById(<qu>txtTimeToChange<qu>).value)) { // time to change must be a positive number\n<id><id>alert(<qu>Time to change must be a number greater than or equal to 0<qu>);\n<id><id>return;\n<id>}\n\n<id>// fill new values\n<id>noOfPoints = document.getElementById(<qu>txtNoOfPoints<qu>).value;\n<id>links = document.getElementById(<qu>txtLinks<qu>).value;\n<id>anchors = document.getElementById(<qu>txtAnchors<qu>).value;\n<id>distance = document.getElementById(<qu>txtDistance<qu>).value;\n<id>timeToChange = document.getElementById(<qu>txtTimeToChange<qu>).value;\n<id>\n<id>// reload background\n<id>arrPoints = [];\n<id>orderOfClosest = [];\n<id>movementX = [];\n<id>movementY = [];\n<id>moves = 0;\n<id>clearInterval(interval);<id>\n<id>createBackground();\n<id>interval = setInterval(changePointsLocation, (timeToChange / distance)); // every timeToChange / distance miliseconds run changePointsLocations\n});\n\nbtnResetBackground.addEventListener(<qu>click<qu>, () => {\n<id>// fill inputs with default values\n<id>document.getElementById(<qu>txtNoOfPoints<qu>).value = 100;\n<id>document.getElementById(<qu>txtLinks<qu>).value = 3;\n<id>document.getElementById(<qu>txtAnchors<qu>).value = 20;\n<id>document.getElementById(<qu>txtDistance<qu>).value = 100;\n<id>document.getElementById(<qu>txtTimeToChange<qu>).value = 5000;\n\n<id>// fill variables with default values\n<id>noOfPoints = document.getElementById(<qu>txtNoOfPoints<qu>).value;\n<id>links = document.getElementById(<qu>txtLinks<qu>).value;\n<id>anchors = document.getElementById(<qu>txtAnchors<qu>).value;\n<id>distance = document.getElementById(<qu>txtDistance<qu>).value;\n<id>timeToChange = document.getElementById(<qu>txtTimeToChange<qu>).value;\n\n<id>// reload background\n<id>arrPoints = [];\n<id>orderOfClosest = [];\n<id>movementX = [];\n<id>movementY = [];\n<id>moves = 0;\n<id>clearInterval(interval);\n<id>createBackground();\n<id>interval = setInterval(changePointsLocation, (timeToChange / distance)); // every timeToChange / distance miliseconds run changePointsLocations\n});\n\n// title\n// -----------------------------------------\n\nfunction makeTitle() {\n<id>let canvTitle = document.getElementById(<qu>canvTitle<qu>);\n<id>let context = canvTitle.getContext(<qu>2d<qu>);\n\n<id>context.font = <qu>55px Times New Roman<qu>;\n<id>context.strokeStyle = <qu>#86C232<qu>;\n<id>context.textAlign = <qu>center<qu>;\n<id>context.strokeText(<qu>Mini152<qu>, canvTitle.width / 2, canvTitle.height / 2);\n}\n\nmakeTitle();\n\n// other button links\n// -----------------------------------------\n\nconst btnCode = document.getElementById(<qu>btnCode<qu>);\nconst btnAbout = document.getElementById(<qu>btnAbout<qu>);\n\nbtnCode.addEventListener(<qu>click<qu>, () => {\n\n});\n\nbtnAbout.addEventListener(<qu>click<qu>, () => {\n\n});\n\n// background animaion\n// -----------------------------------------\n\nconst canvas = document.getElementById(<qu>canvas<qu>); // canvas element\nconst context = canvas.getContext(<qu>2d<qu>); // context of canvas\n\nvar arrPoints = []; // array to store points\nvar orderOfClosest = []; // used to order the closest points\nvar movementX = []; // movementX array\nvar movementY = []; // movementY array\nvar noOfPoints = 100; // total number of points\nvar links = 5; // number of links between nearest points\nvar anchors = 20; // number of points that are on the border\nvar distance = 100; // distance between direction changes (in pixels)\nvar timeToChange = 5000; // miliseconds\n\nvar moves = 0; // variable used in changePointsLocation\n\nclass point2D { // constructor class for point2D\n<id>constructor(x, y, anchor) { this.x = x; this.y = y; this.anchor = anchor; } // each point2D class has 3 variables attached: x, y, anchor\n}\n\nfunction createBackground() { \n<id>// removes canvas blur\n<id>canvas.style.width = 100 + <qu>%<qu>; // canvas style width = 100%\n<id>canvas.style.height = 937 + <qu>px<qu>; // canvas style height = 937px\n<id>var scale = window.devicePixelRatio; // scale = pixel ratio scale\n<id>canvas.width = Math.floor(window.outerWidth * scale) // canvas width = window width adjusted by scale\n<id>canvas.height = Math.floor(937 * scale); // canvas height = window height adjusted by scale\n<id>context.scale(scale, scale); // set scale of context\n\n<id>for (let i = 0; i < noOfPoints; i++) { // loop through all points\n<id><id>if (i < anchors) { // if i less than anchor\n<id><id><id>switch (i % 4) {\n<id><id><id><id>case 0: // if 0\n<id><id><id><id><id>arrPoints.push(new point2D(Math.floor(Math.random() * canvas.width), 0, true)); // make point on top border\n<id><id><id><id><id>break;\n<id><id><id><id>case 1: // if 1\n<id><id><id><id><id>arrPoints.push(new point2D(canvas.width, Math.floor(Math.random() * canvas.height), true)); // make point on right border\n<id><id><id><id><id>break;\n<id><id><id><id>case 2: // if 2\n<id><id><id><id><id>arrPoints.push(new point2D(Math.floor(Math.random() * canvas.width), canvas.height, true)); // make point on bottom border\n<id><id><id><id><id>break;\n<id><id><id><id>case 3: // if 3\n<id><id><id><id><id>arrPoints.push(new point2D(0, Math.floor(Math.random() * canvas.height), true)); // make point on left border\n<id><id><id>}\n<id><id>} else { // if not an anchor point\n<id><id><id>arrPoints.push(new point2D(Math.floor(Math.random() * canvas.width), Math.floor(Math.random() * canvas.height), false)); // make regular point on the screen\n<id><id>}\n<id>}\n}\n\nfunction getClosestPoints(anchorPointIndex) { // get the closest points to the anchorPointIndex\n<id>let temp = []; // temp array\n\n<id>for (let i = 0; i < noOfPoints; i++) { // loop through points\n<id><id>if (i != anchorPointIndex) { // if i is not anchorPointIndex\n<id><id><id>let x = arrPoints[anchorPointIndex].x - arrPoints[i].x; // find the x translation from anchorPointIndex\n<id><id><id>let y = arrPoints[anchorPointIndex].y - arrPoints[i].y; // find the y translation from anchorPointIndex\n<id><id><id>if (Math.sign(x) == -1) x = Math.abs(x); // if x is negative turn it into positive\n<id><id><id>if (Math.sign(y) == -1) y = Math.abs(y); // if y is negative turn it into positive\n<id><id><id>let value = x + y; // get value by adding the both positive x and y together\n<id><id><id>for (let j = 0; j < links; j++) { // loop through links\n<id><id><id><id>if (value < temp[j] || temp[j] == null) { // if value is less than temp[j] or is null\n<id><id><id><id><id>for (let z = j; z < links; z++) { // loop through link from j\n<id><id><id><id><id><id>temp[j + 1] = temp[j]; // shift up temp array by 1\n<id><id><id><id><id><id>orderOfClosest[j + 1] = orderOfClosest[j]; // shift up orderOfClosest array by 1\n<id><id><id><id><id>}\n<id><id><id><id><id>temp[j] = value; // make temp[j] = value\n<id><id><id><id><id>orderOfClosest[j] = i; // make orderOfClosest[j] = i<id><id> \n<id><id><id><id><id>break;\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id>}\n<id>if (orderOfClosest.length > links) orderOfClosest.pop(); // if orderOfClosest array.length is greater than number of links\n<id>if (temp.length > links) temp.pop(); // if temp array.lenth is greater than number of links\n}\n\nfunction changePointsLocation() {\n<id>if (moves <= 0) { // if move less than or equal to 0\n<id><id>for (let i = 0; i < noOfPoints; i++) { // loop through points\n<id><id><id>let x = Math.floor(-1 + Math.random() * (1 + 1 - -1)); // rnd num between 1 and -1\n<id><id><id>let y = Math.floor(-1 + Math.random() * (1 + 1 - -1)); // rnd num between 1 and -1\n<id><id><id>movementX[i] = x; // make movementX[i] = x\n<id><id><id>movementY[i] = y; // make movementY[i] = y\n<id><id>}\n<id><id>moves = distance; // make movement = distance\n<id>}\n<id>moves--; // decrement moves by 1\n<id>for (let i = 0; i < noOfPoints; i++) { // loop through points\n<id><id>// bounds detection\n<id><id>if (arrPoints[i].x <= 0) movementX[i] = 1;\n<id><id>else if (arrPoints[i].x >= canvas.width) movementX[i] = -1;\n<id><id>else if (arrPoints[i].y <= 0) movementY[i] = 1;\n<id><id>else if (arrPoints[i].y >= canvas.height) movementY[i] = -1;\n<id>}\n<id>for (let i = 0; i < noOfPoints; i++) { // loop through points\n<id><id>if (arrPoints[i].anchor == false) { // if it is not and anchor point\n<id><id><id>arrPoints[i] = new point2D(arrPoints[i].x + movementX[i], arrPoints[i].y + movementY[i], false); // move the point in a direction\n<id><id>}\n<id>}\n<id>renderBackground(); // render background\n}\n\nfunction renderBackground() {\n<id>context.fillStyle = <qu>#222629<qu>; // make fill colour = dank gray\n<id>context.fillRect(0, 0, canvas.width, canvas.height); // fill canvas with dark gray\n<id>context.strokeStyle = <qu>#86C232<qu>; // make the stroke colour = green\n<id>context.beginPath(); // begin path so clearing works\n<id>for (let i = 0; i < noOfPoints; i++) {\n<id><id>getClosestPoints(i); // run getClosestPoints(i) function\n<id><id>for (let j = 0; j < links; j++) { // loop through links\n<id><id><id>context.moveTo(arrPoints[i].x, arrPoints[i].y); // move to arrPoint[i].x and y\n<id><id><id>context.lineTo(arrPoints[orderOfClosest[j]].x, arrPoints[orderOfClosest[j]].y); // line to orderOfClosest x and y\n<id><id>}\n<id>}\n<id>context.stroke(); // draw the lines\n}\n\ncreateBackground(); // create background\nvar interval = setInterval(changePointsLocation, (timeToChange / distance)); // every timeToChange / distance miliseconds run changePointsLocations\nrenderBackground();\n"
        },
        {
            "identifier": "drawHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Draw.css<qu>>\n<id><script defer src=<qu>Draw.js<qu>></script>\n<id><title>Draw</title>\n</head>\n<id><body style=<qu>background-color: #222629<qu> oncontextmenu=<qu>return false;<qu>>\n<id><id><div class=<qu>titleDiv<qu>>\n<id><id><id><b class=<qu>title<qu> id=<qu>bTitle<qu>>Draw NaN</b>\n<id><id></div>\n<id><id><canvas class=<qu>canvas<qu> id=<qu>canvas<qu>></canvas>\n<id><id><div class=<qu>btnDiv<qu>>\n<id><id><id><button class=<qu>btns<qu> id=<qu>btnClear<qu>>Clear</button>\n<id><id><id><button class=<qu>btns<qu> id=<qu>btnSave<qu>>Save</button>\n<id><id></div>\n<id><id><div class=<qu>coordDiv<qu>>\n<id><id><id><b id=<qu>bCoords<qu> style=<qu>font-size: 50px; color: #86C232;<qu>>X coord: 0, Y coord: 0</b>\n<id><id></div>\n<id></body>\n</html>\n"
        },
        {
            "identifier": "drawCSS",
            "content": ".titleDiv {\n<id>position: relative;\n<id>margin:0 auto;\n<id>text-align: center;\n<id>background-color: #222629;\n<id>height: 120px;\n<id>width: 763px;\n}\n\n.title {\n<id>font-size: 100px;\n<id>color: #86C232;\n}\n\n.canvas {\n<id>position: relative;\n<id>margin:0 auto;\n<id>width: 800px;\n<id>height:700px;\n<id>background-color: rgb(240, 240, 240);\n<id>display: flex;\n<id>align-items: center;\n}\n\n.btnDiv {\n<id>position: relative;\n<id>margin:0 auto;\n<id>text-align: center;\n<id>background-color: #222629;\n}\n\n.btns {\n<id>font-size: 25px;\n<id>margin: 5px;\n<id>background-color: #222629;\n<id>color: #FFFFFF;\n<id>border: 1px solid #86C232;\n<id>cursor: pointer;\n}\n\n.coordDiv {\n<id>position: relative;\n<id>margin:0 auto;\n<id>text-align: center;\n<id>background-color: #222629;\n}\n"
        },
        {
            "identifier": "drawJS",
            "content": "const canvas = document.getElementById('canvas');\nvar bCoords = document.getElementById('bCoords');\nvar bTitle = document.getElementById('bTitle');\nconst btnClear = document.getElementById('btnClear');\nconst btnSave = document.getElementById('btnSave');\nvar mouseDown = false, drawState = false;\n// x /2.66, y /4.69 \n\n// drawing\nfunction getMousePosUpdate(canvas, evt) {   \n<id>var rect = canvas.getBoundingClientRect();\n<id>var x = 0, y = 0;\n<id>x = evt.clientX - rect.left;\n<id>x += 0.5;\n<id>y = evt.clientY - rect.top;\n<id>return <qu>X coord: <qu> + x + <qu>, Y coord: <qu> + y;\n}\nfunction getMousePosX(canvas, evt) {\n<id>var rect = canvas.getBoundingClientRect();\n<id>var x = 0;\n<id>x = evt.clientX - rect.left;\n<id>return x;\n}\nfunction getMousePosY(canvas, evt) {\n<id>var rect = canvas.getBoundingClientRect();\n<id>var y = 0;\n<id>y = evt.clientY - rect.top;\n<id>return y;\n}\nfunction drawOnMousePostiton(canvas) {\n<id>var ctx = canvas.getContext(<qu>2d<qu>);\n<id>//ctx.moveTo(0, 0)\n<id>//ctx.lineTo(getMousePosX(canvas, event) / 2.66, getMousePosY(canvas, event) / 4.69)\n<id>ctx.lineWidth = <qu>0.5<qu>;\n<id>ctx.strokeStyle = <qu>black<qu>;\n<id>ctx.beginPath();\n<id>ctx.rect(getMousePosX(canvas, event) / 2.66, getMousePosY(canvas, event) / 4.69, 1, 0.4);\n<id>ctx.stroke();\n}\nfunction eraseOnMousePostiton(canvas) {\n<id>var ctx = canvas.getContext(<qu>2d<qu>);\n<id>ctx.lineWidth = <qu>5<qu>;\n<id>ctx.strokeStyle = <qu>rgb(240, 240, 240)<qu>;\n<id>ctx.beginPath();\n<id>ctx.rect(getMousePosX(canvas, event) / 2.66, getMousePosY(canvas, event) / 4.69, 1, 0.4);\n<id>ctx.stroke();\n}\nfunction getTitle(bTitle) {\n<id>var TitleArray = [<qu>Cake<qu>, <qu>Car<qu>, <qu>Tree<qu>, <qu>Apple<qu>, <qu>Pear<qu>, <qu>Plane<qu>, <qu>Train<qu>, <qu>Bear<qu>, <qu>House<qu>, <qu>Beach<qu>, <qu>Rhino<qu>, <qu>Hippo<qu>, <qu>Bathroom<qu>, <qu>Garden<qu>, <qu>Panda<qu>, <qu>Ambulance<qu>, <qu>Alligator<qu>, <qu>Bird<qu>, <qu>Bridge<qu>, <qu>Bus Stop<qu>, <qu>Chair<qu>, <qu>Boat<qu>, <qu>Cat<qu>, <qu>Dog<qu>, <qu>Church<qu>, <qu>Shop<qu>, <qu>Furniture<qu>, <qu>School<qu>];\n<id>var i = Math.floor(Math.random() * TitleArray.length);\n<id>bTitle.innerText = <qu>Draw <qu> + TitleArray[i];\n}\n\n// saving\n\n// read this from here\nfunction saveCanvas() {\n<id>var img = document.createElement('img');\n<id>img.src = canvas.toDataURL()\n\n<id>var div = document.createElement('div');\n<id>div.contentEditable = true;\n<id>div.appendChild(img);\n<id>document.body.appendChild(div);\n\n<id>// do copy\n<id>SelectText(div);\n<id>document.execCommand('Copy');\n<id>document.body.removeChild(div);\n}\n\nfunction SelectText(element) {\n<id>var doc = document;\n<id>if (doc.body.createTextRange) {\n<id><id>var range = document.body.createTextRange();\n<id><id>range.moveToElementText(element);\n<id><id>range.select();\n<id>} else if (window.getSelection) {\n<id><id>var selection = window.getSelection();\n<id><id>var range = document.createRange();\n<id><id>range.selectNodeContents(element);\n<id><id>selection.removeAllRanges();\n<id><id>selection.addRange(range);\n<id>}\n}\n// to here\n\n\n//var fileSaver = require('file-saver');\n//\n//function saveCanvas() {\n//<id>canvas.toBlob(function(blob) {\n//<id><id>fileSaver.saveAs(blob, prompt(<qu>Enter File Name<qu>));\n//<id>});\n//}\n\n//fetch(<qu>Draw.txt<qu>).then(response => response.text()).then(text => console.log(text));\n//console.log(URL.createObjectURL(<qu>text<qu>));\n\n// event handlers\ncanvas.addEventListener(<qu>mousemove<qu>, function() {\n<id>bCoords.innerText = getMousePosUpdate(canvas, event);\n<id>if (mouseDown) {\n<id><id>drawOnMousePostiton(canvas);\n<id>} else if (drawState) {\n<id><id>eraseOnMousePostiton(canvas);\n<id>}\n});\ncanvas.addEventListener(<qu>mousedown<qu> , function() {\n<id>if (event.which == 3) {\n<id><id>drawState = true;\n<id>} else {\n<id><id>mouseDown = true;\n<id>}\n});\ncanvas.addEventListener(<qu>mouseup<qu>, function() {\n<id>mouseDown = false;\n<id>drawState = false;\n});\ncanvas.addEventListener(<qu>mouseleave<qu>, function() {\n<id>mouseDown = false;\n<id>drawState = false;\n});\ncanvas.addEventListener(<qu>click<qu>, function() {\n<id>drawOnMousePostiton(canvas);\n});\n//btn events\nbtnClear.addEventListener(<qu>click<qu>, function() {\n<id>var ctx = canvas.getContext(<qu>2d<qu>);\n<id>ctx.clearRect(0, 0, canvas.width, canvas.height);\n});\nbtnSave.addEventListener(<qu>click<qu>, function() {\n<id>saveCanvas();\n});\ngetTitle(bTitle);\n"
        },
        {
            "identifier": "nAndCHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Noughts&Crosses.css<qu>>\n<id><script defer src=<qu>Noughts&Crosses.js<qu>></script><id>\n<id><title>Noughts & Crosses</title>\n</head>\n<body id=<qu>Body<qu> style=<qu>background-color:#222629;<qu>>\n<id><div style=<qu>margin: 0 auto; text-align: center;<qu>>\n<id><id><b style=<qu>font-size: 75px; color: #86C232;<qu>>Noughts & Crosses</b>\n<id></div>\n<id><br>\n<id><div style=<qu>margin: 0 auto; text-align: center; width: 500px;<qu>>\n<id><id><div>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn1<qu>></button>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn2<qu>></button>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn3<qu>></button>\n<id><id></div>\n<id><id><div class=<qu>row<qu>>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn4<qu> ></button>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn5<qu> ></button>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn6<qu> ></button>\n<id><id></div>\n<id><id><div class=<qu>row<qu>>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn7<qu>></button>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn8<qu>></button>\n<id><id><id><button class=<qu>buttons<qu> id=<qu>btn9<qu>></button>\n<id><id></div>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "nAndCCSS",
            "content": ".buttons {\n<id>width: 150px;\n<id>height: 150px; \n<id>border: 1px solid #86C232; \n<id>background-color: #222629;\n<id>cursor: pointer;\n<id>color: #86C232;\n<id>font-size: 50px;\n<id>float: left;\n}\n.row {\n<id>clear: both;\n}\n"
        },
        {
            "identifier": "nAndCJS",
            "content": "//buttons\nconst btn1 = document.getElementById('btn1');\nconst btn2 = document.getElementById('btn2');\nconst btn3 = document.getElementById('btn3');\nconst btn4 = document.getElementById('btn4');\nconst btn5 = document.getElementById('btn5');\nconst btn6 = document.getElementById('btn6');\nconst btn7 = document.getElementById('btn7');\nconst btn8 = document.getElementById('btn8');\nconst btn9 = document.getElementById('btn9');\n\nconst Body = document.getElementById('Body');\nconst buttons = [, btn1, btn2, btn3, btn4, btn5, btn6, btn7, btn8, btn9];\nvar AlgorithmControlNoughts = false;\n\nfunction WinCondition() {\n<id>var outcome = '0';\n<id>var FullGridCounter = 0;\n<id>var arr = [1, 5, 9];\n<id>var FilledCount = 0;\n<id>for (let j = 1; j <= 2; j++) {\n<id><id>for (let i = 1; i <= 9; i += 3) {\n<id><id><id>if (buttons[i].innerText == outcome && buttons[i + 1].innerText == outcome && buttons[i + 2].innerText == outcome) {\n<id><id><id><id>EndTheGame(outcome);\n<id><id><id><id>return;\n<id><id><id>}\n<id><id>}\n<id><id>for (let i = 1; i <= 3; i ++) {\n<id><id><id>if (buttons[i].innerText == outcome && buttons[i + 3].innerText == outcome && buttons[i + 6].innerText == outcome) {\n<id><id><id><id>EndTheGame(outcome);\n<id><id><id><id>return;\n<id><id><id>}\n<id><id>}\n<id><id>for (var i = 1; i <= 2; i++) {\n<id><id><id>FilledCount = 0;\n<id><id><id>for (var z = 0; z < 3; z++) {\n<id><id><id><id>if (buttons[arr[z]].innerText == outcome) {\n<id><id><id><id><id>FilledCount++;\n<id><id><id><id>}\n<id><id><id><id>if (FilledCount == 3) {\n<id><id><id><id><id>EndTheGame(outcome);\n<id><id><id><id><id>return;\n<id><id><id><id>}\n<id><id><id>}\n<id><id><id>arr = [3, 5, 7];\n<id><id>}\n<id><id>FullGridCounter = 0;\n<id><id>for (let i = 1; i <= 9; i++) {\n<id><id><id>if (buttons[i].innerText != <qu><qu>) {\n<id><id><id><id>FullGridCounter++;\n<id><id><id>}\n<id><id>}\n<id><id>if (FullGridCounter == 9) {\n<id><id><id>EndTheGame(<qu><qu>);\n<id><id><id>return;\n<id><id>}\n<id><id>outcome = 'X';\n<id>}\n}\n\nfunction EndTheGame(WinningTeam) {\n<id>if (WinningTeam == '0') {\n<id><id>alert(<qu>Noughts Win! Clearing Board...<qu>);\n<id><id>ClearBoard();\n<id>} else if (WinningTeam == 'X') {\n<id><id>alert(<qu>Crosses Win! Clearing Board...<qu>);\n<id><id>ClearBoard();\n<id>} else {\n<id><id>alert(<qu>No-one Wins! Clearing Board...<qu>);\n<id><id>ClearBoard();\n<id>}\n}\n\nfunction GetGo(ButtonPressed) {\n<id>if (AlgorithmControlNoughts) {\n<id><id>Crosses(ButtonPressed);\n<id>} else if (!AlgorithmControlNoughts) {\n<id><id>Noughts(ButtonPressed);\n<id>}\n}\n\nfunction Algorithm(algorithmTeam, oppositeTeam) {\n<id>var arr = [1, 5, 9];\n<id>var loopCount = 0;\n\n<id>//Check for 2 oposition team in a row and block:\n\n<id>//Checks horizontals for almost win\n<id>for (var i = 1; i <= 9; i +=3) {\n<id><id>var oppositionFilledCount = 0;\n<id><id>var algorithmFilledCount = 0;\n<id><id>for (var j = 0; j < 3; j++) {\n<id><id><id>if (buttons[i + j].innerText == algorithmTeam) {\n<id><id><id><id>algorithmFilledCount++;\n<id><id><id>}\n<id><id><id>if (algorithmFilledCount == 2) {\n<id><id><id><id>for (var z = 0; z < 3; z++) {\n<id><id><id><id><id>if (buttons[i + z].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[i + z].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id>}\n\n<id>//Checks verticals for almost win\n<id>for (var i = 1; i <= 3; i++) {\n<id><id>var oppositionFilledCount = 0;\n<id><id>var algorithmFilledCount = 0;\n<id><id>for (var j = 0; j < 9; j +=3) {\n<id><id><id>if (buttons[i + j].innerText == algorithmTeam) {\n<id><id><id><id>algorithmFilledCount++;\n<id><id><id>}\n<id><id><id>if (algorithmFilledCount == 2) {\n<id><id><id><id>for (var z = 0; z < 9; z +=3) {\n<id><id><id><id><id>if (buttons[i + z].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[i + z].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>} \n<id>}\n\n<id>//Checks diagonals for almost win\n<id>for (var i = 1; i <= 2; i++) {\n<id><id>var oppositionFilledCount = 0;\n<id><id>var algorithmFilledCount = 0;\n<id><id>for (var j = 0; j < 3; j++) {\n<id><id><id>if (buttons[arr[j]].innerText == algorithmTeam) {\n<id><id><id><id>algorithmFilledCount++;\n<id><id><id>}\n<id><id><id>if (algorithmFilledCount == 2) {\n<id><id><id><id>for (var z = 0; z < 3; z ++) {\n<id><id><id><id><id>if (buttons[arr[z]].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[arr[z]].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id><id>arr = [3, 5, 7];\n<id>}\n\n<id>//Check horizonals for enemy almost win\n<id>for (var i = 1; i <= 9; i +=3) {\n<id><id>var oppositionFilledCount = 0;\n<id><id>var algorithmFilledCount = 0;\n<id><id>for (var j = 0; j < 3; j++) {\n<id><id><id>if (buttons[i + j].innerText == oppositeTeam) {\n<id><id><id><id>oppositionFilledCount++;\n<id><id><id>}\n<id><id><id>if (oppositionFilledCount == 2) {\n<id><id><id><id>for (var z = 0; z < 3; z++) {\n<id><id><id><id><id>if (buttons[i + z].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[i + z].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id>}\n\n<id>//Checks verticals for enemy almost win\n<id>for (var i = 1; i <= 3; i++) {\n<id><id>var oppositionFilledCount = 0;\n<id><id>var algorithmFilledCount = 0;\n<id><id>for (var j = 0; j < 9; j +=3) {\n<id><id><id>if (buttons[i + j].innerText == oppositeTeam) {\n<id><id><id><id>oppositionFilledCount++;\n<id><id><id>}\n<id><id><id>if (oppositionFilledCount == 2) {\n<id><id><id><id>for (var z = 0; z < 9; z +=3) {\n<id><id><id><id><id>if (buttons[i + z].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[i + z].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>} \n<id>}\n\n<id>//Checks diagonals for enemy almost win\n<id>for (var i = 1; i <= 2; i++) {\n<id><id>var oppositionFilledCount = 0;\n<id><id>var algorithmFilledCount = 0;\n<id><id>for (var j = 0; j < 3; j++) {\n<id><id><id>if (buttons[arr[j]].innerText == oppositeTeam) {\n<id><id><id><id>oppositionFilledCount++;\n<id><id><id>}\n<id><id><id>if (oppositionFilledCount == 2) {\n<id><id><id><id>for (var z = 0; z < 3; z ++) {\n<id><id><id><id><id>if (buttons[arr[z]].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[arr[z]].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id><id>arr = [3, 5, 7];\n<id>}\n\n<id>//if btn5 clear place algorithmTeam\n<id>if (buttons[5].innerText == <qu><qu>) {\n<id><id>buttons[5].innerText = algorithmTeam;\n<id><id>WinCondition();\n<id><id>return;\n<id>}\n\n<id>//Check for 1 algortithm team and 2 blanks in row and place\n\n<id>//Checks horizontals clear grid\n<id>for (var i = 1; i <= 9; i +=3) {\n<id><id>var FilledCount = 0;\n<id><id>for (var j = 0; j < 3; j++) {\n<id><id><id>if (buttons[i + j].innerText == algorithmTeam || buttons[i + j].innerText == <qu><qu>) {\n<id><id><id><id>FilledCount++;\n<id><id><id>}\n<id><id><id>if (FilledCount == 3) {\n<id><id><id><id>for (var z = 0; z < 3; z++) {\n<id><id><id><id><id>if (buttons[i + z].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[i + z].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id>}\n\n<id>//Checks verticals for clear grid\n<id>for (var i = 1; i <= 3; i++) {\n<id><id>var FilledCount = 0;\n<id><id>for (var j = 0; j < 9; j +=3) {\n<id><id><id>if (buttons[i + j].innerText == algorithmTeam || buttons[i + j].innerText == <qu><qu>) {\n<id><id><id><id>FilledCount++;\n<id><id><id>}\n<id><id><id>if (FilledCount == 3) {\n<id><id><id><id>for (var z = 0; z < 9; z +=3) {\n<id><id><id><id><id>if (buttons[i + z].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[i + z].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>} \n<id>}\n\n<id>//Checks diagonals for clear grid\n<id>for (var i = 1; i <= 2; i++) {\n<id><id>var FilledCount = 0;\n<id><id>for (var j = 0; j < 3; j++) {\n<id><id><id>if (buttons[arr[j]].innerText == algorithmTeam || buttons[arr[j]].innerText == <qu><qu>) {\n<id><id><id><id>FilledCount++;\n<id><id><id>}\n<id><id><id>if (FilledCount == 3) {\n<id><id><id><id>for (var z = 0; z < 3; z ++) {\n<id><id><id><id><id>if (buttons[arr[z]].innerText == <qu><qu>) {\n<id><id><id><id><id><id>buttons[arr[z]].innerText = algorithmTeam;\n<id><id><id><id><id><id>WinCondition();\n<id><id><id><id><id><id>return;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id><id>arr = [3, 5, 7];\n<id>}\n\n<id>//random place\n<id>while (true) {\n<id><id>var rndGuess = Math.floor(Math.random() * (9 - 1 + 1) ) + 1;\n<id><id>if (buttons[rndGuess].innerText == <qu><qu>) {\n<id><id><id>buttons[rndGuess].innerText = algorithmTeam;\n<id><id><id>WinCondition();\n<id><id><id>return;\n<id><id>}\n<id><id>if (loopCount >= 10) {\n<id><id><id>WinCondition();\n<id><id><id>return;\n<id><id>}\n<id><id>loopCount++;\n<id>}\n}\n\nfunction Noughts(ButtonPressed) {\n<id>if (buttons[ButtonPressed].innerText == <qu><qu>) {\n<id><id>buttons[ButtonPressed].innerText = '0';\n<id><id>WinCondition();\n<id><id>Algorithm('X', '0');\n<id>}\n}\n\nfunction Crosses(ButtonPressed) {\n<id>if (buttons[ButtonPressed].innerText == <qu><qu>) {\n<id><id>buttons[ButtonPressed].innerText = 'X';\n<id><id>WinCondition();\n<id><id>Algorithm('0', 'X');\n<id>}\n}\n\nfunction ClearBoard() {\n<id>for (var i = 1; i <= 9; i++) {\n<id><id>buttons[i] = <qu><qu>;\n<id>}\n<id>window.location.reload();\n}\n\nfunction WhoGoes() {\n<id>var rndNum = Math.floor(Math.random() * (2 - 1 + 1)) + 1;\n<id>if (rndNum == 1) {\n<id><id>alert('Algorithm Controls Noughts');\n<id><id>AlgorithmControlNoughts = true;\n<id><id>Algorithm('0', 'X');\n<id>} else if (rndNum == 2) {\n<id><id>alert('Algorithm Controls Crosses');\n<id><id>AlgorithmControlNoughts = false;\n<id>}\n}\n\nBody.onload = function() {\n<id>WhoGoes();\n}\nbtn1.addEventListener('click', function() {\n<id>GetGo(1);\n})\nbtn2.addEventListener('click', function() {\n<id>GetGo(2);\n})\nbtn3.addEventListener('click', function() {\n<id>GetGo(3);\n})\nbtn4.addEventListener('click', function() {\n<id>GetGo(4);\n})\nbtn5.addEventListener('click', function() {\n<id>GetGo(5);\n})\nbtn6.addEventListener('click', function() {\n<id>GetGo(6);\n})\nbtn7.addEventListener('click', function() {\n<id>GetGo(7);\n})\nbtn8.addEventListener('click', function() {\n<id>GetGo(8);\n})\nbtn9.addEventListener('click', function() {\n<id>GetGo(9);\n})\n"
        },
        {
            "identifier": "gridGameHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<id><head>\n<id><id><meta charset=<qu>UTF-8<qu>>\n<id><id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><id><script defer src=<qu>Grid Game.js<qu>></script>\n<id><id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Grid Game.css<qu>>\n<id><id><title>Grid Game</title>\n<id></head>\n<id><body id=<qu>body<qu> style=<qu>background-color: #222629;<qu>>\n<id><id><div style=<qu>margin: 0 auto; text-align: center;<qu>>\n<id><id><id><b style=<qu>font-size: 75px; color: #86C232;<qu>>Grid Game</b>\n<id><id></div>\n<id><id><br>\n<id><id><div class=<qu>container<qu> id=<qu>container<qu>>\n<id><id></div>\n<id><id><div class=<qu>score<qu>>\n<id><id><id><b id=<qu>energy<qu>>Energy: 100;</b>\n<id><id><id><b id=<qu>score<qu>>Score: 0</b>\n<id><id></div>\n<id></body>\n</html>\n"
        },
        {
            "identifier": "gridGameCSS",
            "content": ":root {\n<id>--grid-cols: 1;\n<id>--grid-rows: 1;\n}\n\n.score {\n<id>margin: 0 auto;\n<id>text-align: center;\n<id>font-size: 30px;\n<id>color: #86C232;\n}\n\n.container {\n<id>width: 500px;\n<id>height: 500px;\n<id>margin: 0 auto;\n<id>text-align: center;\n<id>color: #FFFFFF;\n<id>border: 1px solid #86C232;\n}\n\n#container {\n<id>display: grid;\n<id>grid-template-rows: repeat(var(--grid-rows), 1fr);\n<id>grid-template-columns: repeat(var(--grid-cols), 1fr);\n}\n\n.grid-item {\n<id>border: 1px dashed #86C232;\n<id>padding: 1em;\n<id>width: 16px;\n<id>height: 16px;\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n"
        },
        {
            "identifier": "gridGameJS",
            "content": "const container = document.getElementById(<qu>container<qu>);\nvar foodPosition, playerPosition, Energy = 100, Score = 0;\n\nfunction makeRows(rows, cols) {\n<id>container.style.setProperty('--grid-rows', rows);\n<id>container.style.setProperty('--grid-cols', cols);\n<id>for (c = 0; c < (rows * cols); c++) {\n<id><id>let cell = document.createElement(<qu>div<qu>);\n<id><id>//cell.innerText = (c + 1);\n<id><id>container.appendChild(cell).className = <qu>grid-item<qu>;\n<id><id>container.appendChild(cell).id = <qu>grid<qu> + (c);\n<id>}\n}\n\nfunction createNewFood() {\n<id>var rnd = Math.floor(Math.random() * 100);\n<id>if (rnd == playerPosition) {\n<id><id>foodPosition = createNewFood();\n<id><id>return;\n<id>}\n<id>var id = (<qu>grid<qu> + rnd);\n<id>var element = document.getElementById(id);\n<id>element.innerText = '0';\n<id>return rnd;\n}\n\nfunction checkIfThereIsFoodAndNotDuplicate() {\n<id>var foodCount = 0;\n<id>for (var i = 0; i < 99; i++) {\n<id><id>var id = <qu>grid<qu> + i;\n<id><id>var element = document.getElementById(id);\n<id><id>if (element.innerText == '0') {\n<id><id><id>foodCount++; \n<id><id>}\n<id>}\n<id>if (foodCount > 1) {\n<id><id>for (var i = 0; i < 99; i++) {\n<id><id><id>var id = <qu>grid<qu> + i;\n<id><id><id>var element = document.getElementById(id);\n<id><id><id>element.innerText = '';\n<id><id>}\n<id><id>var id = <qu>grid<qu> + playerPosition;\n<id><id>var element = document.getElementById(id);\n<id><id>element.innerText = 'X';\n<id><id>foodPosition = createNewFood();\n<id>}\n<id>for (var i = 0; i < 99; i++) {\n<id><id>var id = <qu>grid<qu> + i;\n<id><id>var element = document.getElementById(id);\n<id><id>if (element.innerText == '0') {\n<id><id><id>return true;\n<id><id>}\n<id>}\n<id>return false;\n}\n\nfunction getStartPoint() {\n<id>var rnd = Math.floor(Math.random() * 100);\n<id>var id = (<qu>grid<qu> + rnd);\n<id>var element = document.getElementById(id);\n<id>element.innerText = 'X';\n<id>return rnd;\n}\n\nfunction checkIfFood() {\n<id>if (playerPosition == foodPosition) {\n<id><id>foodPosition = createNewFood();\n<id><id>Score += 100;\n<id><id>Energy += 3;\n<id><id>updateEnergy();\n<id><id>updateScore();\n<id>}\n<id>if (!checkIfThereIsFoodAndNotDuplicate()) {\n<id><id>foodPosition = createNewFood();\n<id>}\n}\n\nfunction decrementEnergy() {\n<id>Energy--;\n<id>updateEnergy();\n<id>if (Energy == 0) {\n<id><id>alert(<qu>Game Over<qu> + <qu> <qu> + <qu>Score: <qu> + Score)\n<id><id>window.location.reload();\n<id>}\n}\n\nfunction updateEnergy() {\n<id>var element = document.getElementById('energy');\n<id>element.innerText = <qu>Energy: <qu> + Energy + <qu>;<qu>;\n}\n\nfunction updateScore() {\n<id>var element = document.getElementById('score');\n<id>element.innerText = <qu>Score: <qu> + Score;\n}\n\nfunction moveUp() {\n<id>var id = (<qu>grid<qu> + playerPosition);\n<id>var element = document.getElementById(id);\n<id>element.innerText = '';\n<id>playerPosition -= 10;\n<id>id = (<qu>grid<qu> + playerPosition);\n<id>element = document.getElementById(id);\n<id>element.innerText = 'X';\n}\n\nfunction moveDown() {\n<id>var id = (<qu>grid<qu> + playerPosition);\n<id>var element = document.getElementById(id);\n<id>element.innerText = '';\n<id>playerPosition += 10;\n<id>id = (<qu>grid<qu> + playerPosition);\n<id>element = document.getElementById(id);\n<id>element.innerText = 'X';\n}\n\nfunction moveLeft() {\n<id>var id = (<qu>grid<qu> + playerPosition);\n<id>var element = document.getElementById(id);\n<id>element.innerText = '';\n<id>playerPosition -= 1;\n<id>id = (<qu>grid<qu> + playerPosition);\n<id>element = document.getElementById(id);\n<id>element.innerText = 'X';\n}\n\nfunction moveRight() {\n<id>var id = (<qu>grid<qu> + playerPosition);\n<id>var element = document.getElementById(id);\n<id>element.innerText = '';\n<id>playerPosition += 1;\n<id>id = (<qu>grid<qu> + playerPosition);\n<id>element = document.getElementById(id);\n<id>element.innerText = 'X';\n}\n\nfunction checkLoop(Movement) {\n<id>if (playerPosition.toString().length == 1 && Movement == -10) {\n<id><id>var id = (<qu>grid<qu> + playerPosition);\n<id><id>var element = document.getElementById(id);\n<id><id>element.innerText = '';\n<id><id>playerPosition += 90;\n<id><id>id = (<qu>grid<qu> + playerPosition);\n<id><id>element = document.getElementById(id);\n<id><id>element.innerText = 'X';\n<id><id>return true;\n<id>} else if (playerPosition % 10 == 0 && Movement == - 1) {\n<id><id>var id = (<qu>grid<qu> + playerPosition);\n<id><id>var element = document.getElementById(id);\n<id><id>element.innerText = '';\n<id><id>playerPosition += 9;\n<id><id>id = (<qu>grid<qu> + playerPosition);\n<id><id>element = document.getElementById(id);\n<id><id>element.innerText = 'X';\n<id><id>return true;\n<id>} else if ((playerPosition + 10).toString().length == 3 && Movement == +10) {\n<id><id>var id = (<qu>grid<qu> + playerPosition);\n<id><id>var element = document.getElementById(id);\n<id><id>element.innerText = '';\n<id><id>playerPosition -= 90;\n<id><id>id = (<qu>grid<qu> + playerPosition);\n<id><id>element = document.getElementById(id);\n<id><id>element.innerText = 'X';\n<id><id>return true;\n<id>} else if ((playerPosition + 1) % 10 == 0 && Movement == +1) {\n<id><id>var id = (<qu>grid<qu> + playerPosition);\n<id><id>var element = document.getElementById(id);\n<id><id>element.innerText = '';\n<id><id>playerPosition -= 9;\n<id><id>id = (<qu>grid<qu> + playerPosition);\n<id><id>element = document.getElementById(id);\n<id><id>element.innerText = 'X';\n<id><id>return true;\n<id>} \n<id>return false;\n}\n\nmakeRows(10, 10);\nplayerPosition = getStartPoint();\nfoodPosition = createNewFood();\n\nonkeydown = function() {\n<id>if (event.keyCode == 87 || event.keyCode == 38) { //w\n<id><id>if (checkLoop(-10)) {\n<id><id>}\n<id><id>else {\n<id><id><id>moveUp();\n<id><id>}\n<id><id>checkIfFood();\n<id><id>decrementEnergy();\n<id>} else if (event.keyCode == 65 || event.keyCode == 37) { //a\n<id><id>if (checkLoop(-1)) {\n<id><id>}\n<id><id>else {\n<id><id><id>moveLeft();\n<id><id>}\n<id><id>checkIfFood();\n<id><id>decrementEnergy();\n<id>} else if (event.keyCode == 83 || event.keyCode == 40) { //s\n<id><id>if (checkLoop(+10)) {\n<id><id>} else {\n<id><id><id>moveDown();\n<id><id>}\n<id><id>checkIfFood();\n<id><id>decrementEnergy();\n<id>} else if (event.keyCode == 68 || event.keyCode == 39) { //d\n<id><id>if (checkLoop(+1)) {\n<id><id>} else {\n<id><id><id>moveRight();\n<id><id>}\n<id><id>checkIfFood();\n<id><id>decrementEnergy();\n<id>}\n}\n"
        },
        {
            "identifier": "pongHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Pong.css<qu>>\n<id><script defer src=<qu>Pong.js<qu>></script>\n<id><title>Pong</title>\n</head>\n<body class=<qu>body<qu> id=<qu>body<qu>>\n<id><div class=<qu>div<qu>>\n<id><id><canvas class=<qu>canvas<qu> id=<qu>Pong<qu> width=<qu>600<qu> height=<qu>400<qu>></canvas>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "pongCSS",
            "content": ".div {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n.canvas {\n<id>background-color: black;\n}\n.canvas:hover {\n<id>cursor: default\n}\n\n.body {\n<id>background-color: #222629;\n}\n"
        },
        {
            "identifier": "pongJS",
            "content": "const canvas = document.getElementById('Pong'); // canvas HTML element\nconst context = canvas.getContext('2d'); // context for canvas\nconst body = document.getElementById('body'); // body HTML element\nvar speed = 60;\nvar ball = {\n<id>direction: Math.floor(Math.random() * (4 - 1 + 1)) + 1, // (max - min + 1)) + min;\n<id>x: canvas.width / 2,\n<id>y: canvas.height / 2\n}\nvar user = {\n<id>y: 30,\n<id>score: 0\n\n}\nvar com = {\n<id>y: 30,\n<id>score: 0\n}\nconst net = {\n<id>x: canvas.width/ 2 - 2/ 2,\n<id>y: 0,\n<id>width: 2,\n<id>height: 10,\n<id>colour: <qu>white<qu>\n}\n\n//creating objects\n\nfunction drawPaddle(x, y, w, h) {\n<id>context.fillStyle = <qu>white<qu>;\n<id>context.beginPath();\n<id>context.fillRect(x, y, w, h);\n<id>context.stroke();\n}\n\nfunction clearCanvas() {\n<id>context.clearRect(0, 0, canvas.width, canvas.height); // creates filled rectangle over the canvas screen to clear the screen\n}\n\nfunction moveLeftPaddle() {\n<id>drawPaddle(30, user.y - 30, 15, 60);\n}\n\nfunction moveRightPaddle() {\n<id>drawPaddle(555, algorithm() - 30, 15, 60)\n<id>//com.y = ball.y; // position computer paddle over ball's y position\n<id>//if (ball.y >= 30 && ball.y <= 370) {\n\n<id>//}\n}\n\nfunction drawBall(x, y) {\n<id>context.fillStyle = <qu>white<qu>;\n<id>context.beginPath();\n<id>context.arc(x, y, 10, 0, 2 * Math.PI); // creates ball\n<id>context.fill();\n}\n\nfunction drawNet() {\n<id>for (let i = 0; i < canvas.height; i+=15) {\n<id><id>context.fillRect(net.x, net.y + i,net.width, net.height, net.colour);\n<id>}\n}\n\n//score\n\nfunction UpdateUserScore(score) {\n<id>context.font = <qu>30px Arial<qu>;\n<id>context.fillText(score, 200, 30);\n}\n\nfunction UpdateComScore(score) {\n<id>context.font = <qu>30px Arial<qu>;\n<id>context.fillText(score, 385, 30);\n}\n\nfunction Wait(ms) {\n<id>var d = new Date();\n<id>var d2 = null;\n<id>do { d2 = new Date(); }\n<id>while (d2 - d < ms);\n}\n\nfunction resetObjects() {\n<id>clearCanvas();\n<id>drawPaddle(30, 30, 15, 60); // left paddle\n<id>drawPaddle(555, 30, 15, 60); // right paddle\n<id>drawBall(canvas.width / 2, canvas.height / 2);\n<id>UpdateComScore(com.score);\n<id>UpdateUserScore(user.score);\n<id>user.y = 60;\n<id>com.y = 60;\n<id>ball.x = canvas.width / 2;\n<id>ball.y = canvas.height / 2;\n<id>ball.direction = Math.floor(Math.random() * (4 - 1 + 1)) + 1;\n<id>clearInterval(gameInterval);\n<id>speed = 60;\n<id>gameInterval = setInterval(game, 1000 / speed);\n}\n\n// com play algorithm\n\nfunction algorithm() { // returns position\n<id>if (ball.y >= 20 && ball.y <= 380) {\n<id><id>com.y += (ball.y - com.y) * 0.07;\n<id><id>return com.y;\n<id>}\n<id>return com.y;\n\n<id>//********************************\n<id>//* com just starts freaking out *\n<id>//********************************\n\n<id>//if (ball.x >= 500) {\n<id>//<id>var rndPos = Math.floor(Math.random() * (60 - 1 + 1)) + 1;\n<id>//<id>com.y = (ball.y - 30) + rndPos;\n<id>//<id>return com.y;\n<id>//} else {\n<id>//<id>com.y = ball.y - 30;\n<id>//<id>return com.y;\n<id>//}\n\n<id>// ******************************\n<id>// * deflect to opposite corner *\n<id>// ******************************\n<id>\n<id>//if (user.y >= (canvas.height / 2) + 100) {\n<id>//<id>com.y = (ball.y + 25);\n<id>//} else if (user.y <= (canvas.height / 2) - 100) {\n<id>//<id>com.y = (ball.y - 25); \n<id>//} else {\n<id>//<id>com.y = ball.y;\n<id>//}\n<id>//return com.y\n}\n\n//handling game render & progress\n\nfunction render() {\n<id>clearCanvas();\n<id>moveLeftPaddle();\n<id>moveRightPaddle();\n<id>drawBall(ball.x, ball.y);\n<id>drawNet();\n<id>UpdateComScore(com.score);\n<id>UpdateUserScore(user.score);\n}\n\nfunction ballCollision() {\n<id>var rect = canvas.getBoundingClientRect();\n<id>switch (ball.y) {\n<id><id>case rect.top:\n<id><id><id>if (ball.direction == 1) {\n<id><id><id><id>ball.direction = 2;\n<id><id><id>} else {\n<id><id><id><id>ball.direction = 3;\n<id><id><id>}\n<id><id><id>break;\n<id><id>case rect.bottom - 14:\n<id><id><id>if (ball.direction == 3) {\n<id><id><id><id>ball.direction = 4;\n<id><id><id>} else {\n<id><id><id><id>ball.direction = 1;\n<id><id><id>}\n<id><id><id>break;\n<id>}\n<id>switch (ball.x) {\n<id><id>case 558:\n<id><id><id>if (ball.y >= com.y - 30 && ball.y <= (com.y + 60) - 30) {\n<id><id><id><id>//same direction\n<id><id><id><id>if (ball.y >= com.y - 30 && ball.y <= (com.y + 15) - 30) {\n<id><id><id><id><id> ball.direction = 4;\n<id><id><id><id>} else if (ball.y >= (com.y + 45) - 30 && ball.y <= (com.y + 60) - 30) {\n<id><id><id><id><id> ball.direction = 3;\n<id><id><id><id>} else {\n<id><id><id><id><id>//bounce\n<id><id><id><id><id>if (ball.direction == 2) {\n<id><id><id><id><id>ball.direction = 3;\n<id><id><id><id><id>} else {\n<id><id><id><id><id>ball.direction = 4;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id><id>paddleBounce();\n<id><id><id>}\n<id><id><id>break;\n<id><id>case 48:\n<id><id><id>if (ball.y >= user.y - 30 && ball.y <= (user.y + 60) - 30) {\n<id><id><id><id>//same direction\n<id><id><id><id>if (ball.y >= user.y - 30 && ball.y <= (user.y + 15) - 30) {\n<id><id><id><id><id>ball.direction = 1;<id><id><id><id>\n<id><id><id><id>} else if (ball.y >= (user.y + 45) - 30 && ball.y <= (user.y + 60) - 30) {\n<id><id><id><id><id>ball.direction = 2;\n<id><id><id><id>} else {\n<id><id><id><id><id>//bounce\n<id><id><id><id><id>if (ball.direction == 3) {\n<id><id><id><id><id><id>ball.direction = 2;\n<id><id><id><id><id>} else {\n<id><id><id><id><id><id>ball.direction = 1;\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id><id>paddleBounce();\n<id><id><id>}\n<id><id><id>break;<id><id>\n<id><id>case 30:\n<id><id><id>com.score++;\n<id><id><id>UpdateComScore(com.score);\n<id><id><id>resetObjects();\n<id><id><id>break;\n<id><id>case 570:\n<id><id><id>user.score++;\n<id><id><id>UpdateUserScore(user.score);\n<id><id><id>resetObjects();\n<id><id><id>break;\n<id>}\n}\n\nfunction update() {\n<id>switch (ball.direction) {\n<id><id>case 1:\n<id><id><id>ball.y-=2;\n<id><id><id>ball.x+=2;\n<id><id><id>break;\n<id><id>case 2:\n<id><id><id>ball.x+=2;\n<id><id><id>ball.y+=2;\n<id><id><id>break;\n<id><id>case 3:\n<id><id><id>ball.y+=2;\n<id><id><id>ball.x-=2;\n<id><id><id>break;\n<id><id>case 4:\n<id><id><id>ball.x-=2;\n<id><id><id>ball.y-=2;\n<id><id><id>break;\n<id>}\n<id>ballCollision();\n}\n\nfunction paddleBounce() {\n<id>clearInterval(gameInterval);\n<id>speed += 5;\n<id>if (speed > 150) {\n<id><id>speed = 150;\n<id>}\n<id>gameInterval = setInterval(game, 1000 / speed);\n}\n\n//handling game loop\n\ncanvas.addEventListener('mousemove', function(event) {\n<id>if (event.clientY >= 30 && event.clientY <= 370) {\n<id><id>user.y = event.clientY; // updates player position\n<id>}\n});\n\nbody.addEventListener('keypress', function() {\n<id>if (event.which == 87) {\n<id><id>user.y -= 30;\n<id>} else if (event.which == 83) {\n<id><id>user.y += 30;\n<id>}\n});\n\nfunction game() {\n<id>update();\n<id>render();\n}\n\nresetObjects();\nvar gameInterval = setInterval(game, 1000 / speed);\n"
        },
        {
            "identifier": "snakeHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Snake.css<qu>>\n<id><script defer src=<qu>Snake.js<qu>></script>\n<id><title>Snake</title>\n</head>\n<body class=<qu>body<qu>>\n<id><div class=<qu>div<qu>>\n<id><id><canvas id=<qu>canvas<qu> width=<qu>400<qu> height=<qu>400<qu>></canvas>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "snakeCSS",
            "content": ".body {\n<id>background-color: #222629;\n}\n\n.div {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n"
        },
        {
            "identifier": "snakeJS",
            "content": "const canvas = document.getElementById(<qu>canvas<qu>); // canvas element\nconst context = canvas.getContext(<qu>2d<qu>); // 2d context of canvas\n\n\nvar playerX = playerY = 10; // position of player\nvar gridDimension = 20; // width & height of grid\nvar appleX = rndNum(), appleY = rndNum(); // random location of apple\nvar xVelocity = yVelocity = 0; // direction of movement\nvar trail = []; // holds values of all tail positions\nvar tail = 5; // length of tail\n\nfunction rndNum() { //returns rnd num x or y on grid\n<qu>return Math.floor(Math.random() * gridDimension); // random number between 1 and 20\n}\n\n//rendering, updating & looping game ----------------------\n\nfunction game() {\n<id>playerX += xVelocity; // increaces playerX by xVelocity\n<id>playerY += yVelocity; // increaces playerY by yVelocity\n<id>checkForLoop();\n<id>render();\n}\n\nfunction checkForLoop() {\n<id>if (playerX < 0) {\n<id><id>playerX = gridDimension - 1; // loops left to right\n<id>} else if (playerX > gridDimension - 1) {\n<id><id>playerX = 0; // loops right to left\n<id>} else if (playerY < 0) {\n<id><id>playerY = gridDimension - 1; // loops top to bottom\n<id>} else if (playerY > gridDimension - 1) {\n<id><id>playerY = 0; // loops bottom to top\n<id>}\n}\n\nfunction render() {\n<id>//clear canvas\n<id>context.fillStyle = <qu>black<qu>;\n<id>context.fillRect(0, 0, canvas.width, canvas.height);\n<id>//draw on apple\n<id>context.fillStyle = <qu>red<qu>;\n<id>context.fillRect(appleX * gridDimension, appleY * gridDimension, gridDimension - 2, gridDimension - 2);\n<id>//draw on snake\n<id>context.fillStyle = <qu>lime<qu>;\n<id>for (var i = 0; i < trail.length; i++) {\n<id><id>context.fillRect(trail[i].x * gridDimension, trail[i].y * gridDimension, gridDimension - 2, gridDimension - 2);\n<id><id>if (trail[i].x == playerX && trail[i].y == playerY) { //if snake eats itself\n<id><id><id>tail = 5;\n<id><id>}\n<id>}\n<id>//add on new value (current x, y) to array\n<id>trail.push({\n<id><id>x: playerX,\n<id><id>y: playerY\n<id>});\n<id>//remove last value from array - (this & command above moves snake)\n<id>while (trail.length > tail) {\n<id><id>trail.shift();\n<id>}\n<id>//if on apple\n<id>if (appleX == playerX && appleY == playerY) {\n<id><id>tail++;\n<id><id>appleX = rndNum();\n<id><id>appleY = rndNum();\n<id>}\n}\n\n//handling game running -----------------------------------\nfunction keyPush(evt) {\n<id>switch (evt.keyCode) {\n<id><id>case 65: case 37: // left\n<id><id><id>//stops you moving back onto yourself\n<id><id><id>if (xVelocity != 1) {\n<id><id><id><id>xVelocity = -1;\n<id><id><id><id>yVelocity = 0;\n<id><id><id>}\n<id><id><id>break;\n<id><id>case 87: case 38: // up\n<id><id><id>//stops you moving back onto yourself\n<id><id><id>if (yVelocity != 1) {\n<id><id><id><id>xVelocity = 0;\n<id><id><id><id>yVelocity = -1;\n<id><id><id>}\n<id><id><id>break;\n<id><id>case 68: case 39: // right\n<id><id><id>//stops you moving back onto yourself\n<id><id><id>if (xVelocity != -1) {\n<id><id><id><id>xVelocity = 1;\n<id><id><id><id>yVelocity = 0;\n<id><id><id>}\n<id><id><id>break;\n<id><id>case 83: case 40: // down\n<id><id><id>//stops you moving back onto yourself\n<id><id><id>if (yVelocity != -1) {\n<id><id><id><id>xVelocity = 0;\n<id><id><id><id>yVelocity = 1;\n<id><id><id>}\n<id><id><id>break;\n<id>}\n}\n\ndocument.addEventListener(<qu>keydown<qu>, keyPush);\nsetInterval(game, 1000 / 15); // 15 fps\n\n// Read from file\n"
        },
        {
            "identifier": "flappyBirbHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./FlappyBirb.css<qu>>\n<id><script defer src=<qu>FlappyBirb.js<qu>></script>\n<id><title>Flappy Birb</title>\n</head>\n<body id=<qu>body<qu> style=<qu>background-color: #222629;<qu>>\n<id><div class=<qu>div<qu>>\n<id><id><canvas id=<qu>canvas<qu> class=<qu>canvas<qu>></canvas>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "flappyBirbCSS",
            "content": ".div {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n.canvas {\n<id>width: 800px;  \n<id>height: 400px;\n<id>background-color: lightblue;\n}\n"
        },
        {
            "identifier": "flappyBirbJS",
            "content": "const canvas = document.getElementById('canvas');\nconst body = document.getElementById('body');\nconst context = canvas.getContext('2d');\n\nvar leftMostPole = 100;\nvar topHeightValues = [Math.floor(Math.random() * 71), Math.floor(Math.random() * 71), Math.floor(Math.random() * 71)];\nvar player = {\n<id>x: 30,\n<id>y: 50,\n<id>score: 0\n}\n\n//create player\nfunction createPlayer(x, y) {\n<id>//bird body\n<id>createBirdBody(x, y);\n<id>//eye\n<id>createBirdEye(x, y);\n<id>//beak\n<id>createBirdBeak(x, y);\n}\n\nfunction createBirdBody(x, y) {\n<id>context.beginPath();\n<id>context.fillStyle = <qu>yellow<qu>;\n<id>context.arc(x, y, 8, 0, 2 * Math.PI);\n<id>context.fill();\n}\n\nfunction createBirdEye(x, y) {\n<id>context.beginPath();\n<id>context.fillStyle = <qu>black<qu>;\n<id>context.arc(x + 2, y + -3, 2, 0, 2 * Math.PI);\n<id>context.fill();\n}\n\nfunction createBirdBeak(x, y) {\n<id>// the triangle\n<id>x += 7;\n<id>y -= 4;\n<id>context.beginPath();\n<id>context.moveTo(x, y);\n<id>context.lineTo(x + 8, y + 5);\n<id>context.lineTo(x, y + 8);\n<id>// the fill colour\n<id>context.fillStyle = <qu>orange<qu>;\n<id>context.fill();\n}\n\n//poles\n\n//new instance of poles\n\nfunction createNewPoles(x, topHeight) {\n<id>var rect = canvas.getBoundingClientRect();\n<id>var bottomHeight = topHeight + 50;\n<id>context.fillStyle = <qu>green<qu>;\n<id>context.beginPath();\n<id>//top pole\n<id>context.fillRect(x, 0, 20, topHeight);\n<id>//bottom pole\n<id>context.fillRect(x, bottomHeight, 20, rect.bottom - bottomHeight);\n<id>//context.fillRect(x, 0, 20, topHeight)\n<id>context.fill();\n}\n\nfunction movePoles() {\n<id>if (leftMostPole > 0) {\n<id><id>leftMostPole--;\n<id>} else {\n<id><id>leftMostPole = 100; \n<id><id>topHeightValues[0] = topHeightValues[1];\n<id><id>topHeightValues[1] = topHeightValues[2];\n<id><id>topHeightValues[2] = Math.floor(Math.random() * 71);\n<id>}\n}\n\nfunction createPoles() {\n<id>createNewPoles(leftMostPole, 15 + topHeightValues[0]);\n<id>createNewPoles(leftMostPole + 100, 15 + topHeightValues[1]);\n<id>createNewPoles(leftMostPole + 200, 15 + topHeightValues[2]);\n}\n\n//pole collision detection\n\nfunction poleCollisionDetection() {\n<id>if (player.x >= leftMostPole && player.x <= leftMostPole + 20) {\n<id><id>if (player.y - 8 < topHeightValues[0] + 15 || player.y + 8 > topHeightValues[0] + 65) {\n<id><id><id>resetGame();\n<id><id>}\n<id>}\n}\n\n//display & update score\n\nfunction checkForUpdatedScore() {\n<id>if (player.x == leftMostPole + 10) {\n<id><id>player.score++;\n<id>}\n}\n\nfunction updateScore() {\n<id>context.fillStyle = <qu>black<qu>;\n<id>context.font = <qu>18px Arial<qu>;\n<id>context.fillText(player.score, (canvas.width / 2) - 5, 20);\n}\n\n// update, render & reset\n\nfunction game() {\n<id>update();\n<id>render();\n}\n\nfunction update() {\n<id>player.y++;\n<id>bounderyTop();\n<id>bounderyBottom();\n<id>poleCollisionDetection();\n<id>checkForUpdatedScore();<id>\n<id>movePoles();\n}\n\nfunction render() {\n<id>clearCanvas();\n<id>createPlayer(player.x, player.y);\n<id>createPoles();\n<id>updateScore();\n}\n\nfunction bounderyTop() {\n<id>var rect = canvas.getBoundingClientRect();\n<id>if (player.y <= rect.top) {\n<id><id>player.y = rect.top;\n<id>}\n}\n\nfunction bounderyBottom() {\n<id>var rect = canvas.getBoundingClientRect();\n<id>if (player.y >= rect.top + canvas.height - 16) {\n<id><id>resetGame();\n<id>}\n}\n\nfunction resetGame() {\n<id>clearInterval(gameInterval);\n<id>player.y = 50;\n<id>leftMostPole = 100\n<id>for (var i = 0; i < 3; i++) {\n<id><id>topHeightValues[i] = Math.floor(Math.random() * 71);\n<id>}\n<id>player.score = 0;\n<id>gameInterval = setInterval(game, 1000/ 40);\n}\n\nfunction clearCanvas() {\n<id>context.clearRect(0, 0, canvas.width, canvas.height); // creates filled rectangle over the canvas screen to clear the screen\n}\n\n//movement\n\nbody.addEventListener('keypress', function() {\n<id>if (event.which == 32) {\n<id><id>player.y -= 15;\n<id>}\n});\nbody.addEventListener('mousedown', function() {\n<id>if (event.which == 1) {\n<id><id>player.y -= 15;\n<id>}\n})\n\n//game loop\n\nvar gameInterval = setInterval(game, 1000/ 40);\n\n"
        },
        {
            "identifier": "tetrisHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Tetris.css<qu>>\n<id><script defer src=<qu>Tetris.js<qu>></script>\n<id><title>Tetris</title>\n</head>\n<body id=<qu>body<qu> class=<qu>body<qu>>\n<id><div class=<qu>div<qu>>\n<id><id><canvas class=<qu>canvas<qu> id=<qu>canvas<qu>></canvas>\n<id><id><div class=<qu>scoreDiv<qu>>\n<id><id><id><label class=<qu>scoreLbl<qu>>Score:</label><br>\n<id><id><id><b class=<qu>score<qu> id=<qu>bScore<qu>>0</b><id><id>  \n<id><id></div>\n<id></div>\n</body>\n</htmllabel\n"
        },
        {
            "identifier": "tetrisCSS",
            "content": ".body {\n<id>background-color: #222629;\n}\n\n.div {\n<id>text-align: center;\n<id>margin: 0 auto;\n}\n\n.canvas {\n<id>width: 400px;\n<id>height: 800px;\n<id>background-color: black;\n}\n\n.score {\n<id>font-size: 20px;\n<id>color: #86C232;\n}\n\n.scoreLbl {\n<id>color: #86C232;\n}\n\n.scoreDiv {\n<id>text-align: center;\n<id>margin: 0 auto; \n}\n"
        },
        {
            "identifier": "tetrisJS",
            "content": "const canvas = document.getElementById('canvas');\nconst context = canvas.getContext('2d');\nconst body = document.getElementById('body');\n\n//Guide:\n//30X x x 7.5Y per tile\n\n//blank - 0\n//light blue - 1\n//blue - 2\n//orange - 3\n//yellow - 4\n//green - 5\n//purple - 6\n//red - 7\n\n//canvas - 150 y\n//canvas - 300 x\n\n// X = 0 - 9, Y = 0 - 19\n\n//board[y][x]\n\n//declare pieces\nconst lightBlue = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: 0,\n<id>piece1X: -1,\n<id>piece2Y: 0,\n<id>piece2X: -2,\n<id>piece3Y: 0,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>lightblue<qu>,\n<id>colourNum: 1,\n<id>score: 3\n}\nconst blue = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: 0,\n<id>piece1X: -1,\n<id>piece2Y: -1,\n<id>piece2X: -1,\n<id>piece3Y: 0,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>blue<qu>,\n<id>colourNum: 2,\n<id>score: 4\n}\nconst orange = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: 0,\n<id>piece1X: -1,\n<id>piece2Y: 0,\n<id>piece2X: 1,\n<id>piece3Y: -1,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>orange<qu>,\n<id>colourNum: 3,\n<id>score: 4\n}\nconst yellow = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: 0,\n<id>piece1X: 1,\n<id>piece2Y: -1,\n<id>piece2X: 0,\n<id>piece3Y: -1,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>yellow<qu>,\n<id>colourNum: 4,\n<id>score: 4\n}\nconst green = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: 0,\n<id>piece1X: -1,\n<id>piece2Y: -1,\n<id>piece2X: 0,\n<id>piece3Y: -1,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>green<qu>,\n<id>colourNum: 5,\n<id>score: 4\n}\nconst purple = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: 0,\n<id>piece1X: -1,\n<id>piece2Y: -1,\n<id>piece2X: 0,\n<id>piece3Y: 0,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>purple<qu>,\n<id>colourNum: 6,\n<id>score: 4\n}\nconst red = {\n<id>//pivot coords\n<id>x: 5,\n<id>y: 1,\n<id>//other pieces\n<id>piece1Y: -1,\n<id>piece1X: -1,\n<id>piece2Y: -1,\n<id>piece2X: 0,\n<id>piece3Y: 0,\n<id>piece3X: 1,\n<id>//other\n<id>colour: <qu>red<qu>,\n<id>colourNum: 7,\n<id>score: 4\n}\n\nvar activePiece;\nvar score = 0;\n\n//create board array\nvar board = new Array(20);\n\nfor (let j = 0; j < 20; j++) {\n<id>board[j] = new Array(10);\n}\n\n//initialise array\nfor (let j = 0; j < 20; j++) {\n<id>for (let i = 0; i < 10; i++) {\n<id><id>if (j == 19) {\n<id><id><id>board[j][i] = 8;\n<id><id>} else {\n<id><id><id>board[j][i] = 0; \n<id><id>}\n<id>}\n}\n\n//create pieceArray\nvar pieceArray = Array(3);\n\nfor (let j = 0; j < 3; j++) {\n<id>pieceArray[j] = Array(3);\n}\n\n//initialise array\nfor (let j = 0; j < 3; j++) {\n<id>for (let i = 0; i < 3; i++) {\n<id><id>pieceArray[j][i] = 0;\n<id>}\n}\n\n//render\n\nfunction renderBoard() {\n<id>context.clearRect(0, 0, canvas.width, canvas.height);\n<id>for (let j = 0; j < 20; j++) {\n<id><id>for (let i = 0; i < 10; i++) {\n<id><id><id>colourTile(i, j);\n<id><id>}\n<id>}\n}\n\nfunction colourTile(i, j) {\n<id>switch (board[j][i]) {\n<id><id>case 0:\n<id><id><id>//blank space\n<id><id><id>context.fillStyle = <qu>black<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 1:\n<id><id><id>//light blue\n<id><id><id>context.fillStyle = <qu>lightblue<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 2:\n<id><id><id>//blue\n<id><id><id>context.fillStyle = <qu>blue<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 3:\n<id><id><id>//orange\n<id><id><id>context.fillStyle = <qu>orange<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 4:\n<id><id><id>//yellow\n<id><id><id>context.fillStyle = <qu>yellow<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 5:\n<id><id><id>//green\n<id><id><id>context.fillStyle = <qu>green<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 6:\n<id><id><id>//purple\n<id><id><id>context.fillStyle = <qu>purple<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 7:\n<id><id><id>//red\n<id><id><id>context.fillStyle = <qu>red<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 8:\n<id><id><id>//lightslategrey\n<id><id><id>context.fillStyle = <qu>#222629<qu>;\n<id><id><id>createTile(i, j);\n<id><id><id>break;\n<id><id>case 9:\n<id><id><id>//active tile\n<id><id><id>context.fillStyle = activePiece.colour;\n<id><id><id>createTile(i, j)\n<id><id><id>break;\n<id>}\n}\n\nfunction createTile(i, j) {\n<id>context.fillRect(i * 30, j * 7.5, 30, 7.5);\n}\n\n//select piece\n\nfunction newPiece() {\n<id>var rnd = Math.floor(Math.random() * 7);\n<id>switch (rnd) {\n<id><id>case 0:\n<id><id><id>activePiece = lightBlue;\n<id><id><id>break;\n<id><id>case 1:\n<id><id><id>activePiece = blue;\n<id><id><id>break;\n<id><id>case 2:\n<id><id><id>activePiece = orange;\n<id><id><id>break;\n<id><id>case 3:\n<id><id><id>activePiece = yellow;\n<id><id><id>break;\n<id><id>case 4:\n<id><id><id>activePiece = green;\n<id><id><id>break;\n<id><id>case 5:\n<id><id><id>activePiece = purple;\n<id><id><id>break;\n<id><id>case 6:\n<id><id><id>activePiece = red;\n<id><id><id>break;\n<id>}\n<id>activePiece.y = 1; \n<id>activePiece.x = 5;\n}\n\n//piece rotation\n\nfunction rotatePiece() {\n<id>clearPieceArray();\n<id>var boardY = 0;\n<id>for (let j = 0; j < 3; j++) {\n<id><id>for (let i = 0; i < 3; i++) {\n<id><id><id>if (i == 0) {\n<id><id><id><id>boardY = 2;\n<id><id><id>} else if (i == 2) {\n<id><id><id><id>boardY = 0;\n<id><id><id>} else {\n<id><id><id><id>boardY = 1;\n<id><id><id>}\n<id><id><id>if (rotateOnly9s(((activePiece.x - 1) + j), ((activePiece.y - 1) + boardY))) {\n<id><id><id><id>pieceArray[j][i] = board[(activePiece.y - 1) + boardY][(activePiece.x - 1) + j];<id><id><id><id>\n<id><id><id>}\n<id><id>}\n<id>}\n\n<id>//pieceArray[0][2] = board[activePiece.y - 1][activePiece.x - 1]; // 0, 0\n<id>//pieceArray[1][2] = board[activePiece.y - 1][activePiece.x]; // 0, 1\n<id>//pieceArray[2][2] = board[activePiece.y - 1][activePiece.x + 1]; // 0, 2\n<id>//pieceArray[0][1] = board[activePiece.y][activePiece.x - 1]; // 1, 0\n<id>//pieceArray[1][1] = board[activePiece.y][activePiece.x]; // 1, 1\n<id>//pieceArray[2][1] = board[activePiece.y][activePiece.x + 1]; // 1, 2\n<id>//pieceArray[0][0] = board[activePiece.y + 1][activePiece.x - 1]; // 2, 0\n<id>//pieceArray[1][0] = board[activePiece.y + 1][activePiece.x]; // 2, 1\n<id>//pieceArray[2][0] = board[activePiece.y + 1][activePiece.x + 1]; // 2, 2\n<id>//output array\n<id>remove9s();\n\n<id>//createActivePiece();\n}\n\nfunction rotateOnly9s(i, j) {\n<id>if (board[j][i] == 9) {\n<id><id>return true;\n<id>} else {\n<id><id>return false;\n<id>}\n}\n\n\n//create & clear activePiece\n\nfunction createInitialActivePiece() {\n<id>pieceArray[1][1] = 9;\n<id>pieceArray[1 + activePiece.piece1Y][1 + activePiece.piece1X] = 9;\n<id>pieceArray[1 + activePiece.piece2Y][1 + activePiece.piece2X] = 9;\n<id>pieceArray[1 + activePiece.piece3Y][1 + activePiece.piece3X] = 9;\n<id>createActivePiece();\n}\n\nfunction remove9s() {\n<id>for (let j = 0; j < 20; j++) {\n<id><id>for (let i = 0; i < 10; i++) {\n<id><id><id>if (board[j][i] == 9) {\n<id><id><id><id>board[j][i] = 0;\n<id><id><id>}\n<id><id>}\n<id>}\n}\n\nfunction createActivePiece() {\n<id>for (let j = 0; j < 3; j++) {\n<id><id>for (let i = 0; i < 3; i++) {\n<id><id><id>if (pieceArray[j][i] == 9) {\n<id><id><id><id>board[(activePiece.y - 1) + j][(activePiece.x - 1) + i] = pieceArray[j][i];\n<id><id><id>}// else {\n<id><id><id>//<id>board[(activePiece.y - 1) + j][(activePiece.x - 1) + i] = board[(activePiece.y - 1) + j][(activePiece.x - 1) + i];\n<id><id><id>//}\n<id><id>}\n<id>}\n}\n\n//clear piece array\n\nfunction clearPieceArray() {\n<id>for (let j = 0; j < 3; j++) {\n<id><id>for (let i = 0; i < 3; i++) {\n<id><id><id>pieceArray[j][i] = 0;\n<id><id>}\n<id>}\n}\n\n//border & piece collision detection\n\nfunction detectSideBorders(movement) {\n<id>if ((board[activePiece.y - 1][9] == 9 || board[activePiece.y][9] == 9 || board[activePiece.y + 1][9] == 9) && movement == 1) {\n<id><id>return false;\n<id>} else if ((board[activePiece.y - 1][0] == 9 || board[activePiece.y][0] == 9 || board[activePiece.y + 1][0] == 9) && movement == -1) {\n<id><id>return false;\n<id>} else {\n<id><id>return true;\n<id>}\n}\n\nfunction checkCrossedBorder() {\n<id>if (activePiece.x == 9) {\n<id><id>if (pieceArray[0][2] == 9 || pieceArray[2][2] == 9) {\n<id><id><id>return false;\n<id><id>}\n<id>} else if (activePiece.x == 0) {\n<id><id>if (pieceArray[0][0] == 9 || pieceArray[2][0] == 9) {\n<id><id><id>return false;\n<id><id>}\n<id>} else {\n<id>return true;<id><id>\n<id>}\n}\n\nfunction blockHorizontalMovement(movement) {\n<id>//gets stuck on right\n<id>for (let j = 0; j < 3; j++) {\n<id><id>for (let i = 0; i < 3; i++) {\n<id><id><id>if (activePiece.x - 2 > 0 && movement == -1) {\n<id><id><id><id>if (pieceArrayLeftClear()) {\n<id><id><id><id><id>//-2\n<id><id><id><id><id>if (board[(activePiece.y - 1) + j][(activePiece.x - 1) + i] == 9) {\n<id><id><id><id><id><id>if ((board[(activePiece.y - 1) + j][(activePiece.x - 2) + i] != 0 && board[(activePiece.y - 1) + j][(activePiece.x - 2) + i] != 9)) {\n<id><id><id><id><id><id><id>return true;\n<id><id><id><id><id><id>}\n<id><id><id><id><id>}\n<id><id><id><id>} else {\n<id><id><id><id><id>//-1\n<id><id><id><id><id>if (board[(activePiece.y - 1) + j][(activePiece.x - 1) + i] == 9) {\n<id><id><id><id><id><id>if ((board[(activePiece.y - 1) + j][(activePiece.x - 2) + i] != 0 && board[(activePiece.y - 1) + j][(activePiece.x - 2) + i] != 9) && movement == -1) {\n<id><id><id><id><id><id><id>return true;\n<id><id><id><id><id><id>}\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id><id>if (activePiece.x + 2 < 9 && movement == 1) {\n<id><id><id><id>if (pieceArrayRightClear()) {\n<id><id><id><id><id>//2\n<id><id><id><id><id>if (board[(activePiece.y - 1) + j][(activePiece.x - 1) + i] == 9) {\n<id><id><id><id><id><id>if ((board[(activePiece.y - 1) + j][(activePiece.x + 1) + i] != 0 && board[(activePiece.y - 1) + j][(activePiece.x + 1) + i] != 9)) {\n<id><id><id><id><id><id><id>return true;\n<id><id><id><id><id><id>}\n<id><id><id><id><id>}\n<id><id><id><id>} else {\n<id><id><id><id><id>//1\n<id><id><id><id><id>if (board[(activePiece.y - 1) + j][(activePiece.x - 1) + i] == 9) {\n<id><id><id><id><id><id>if ((board[(activePiece.y - 1) + j][(activePiece.x) + i] != 0 && board[(activePiece.y - 1) + j][(activePiece.x) + i] != 9) && movement == 1) {\n<id><id><id><id><id><id><id>return true;\n<id><id><id><id><id><id>}\n<id><id><id><id><id>}\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id>}\n<id>return false;\n}\n\nfunction pieceArrayLeftClear() {\n<id>var count = 0;\n<id>for (let j = 0; j < 3; j++) {\n<id><id>if (pieceArray[j][0] == 9) {\n<id><id><id>count++;\n<id><id>}\n<id>}\n<id>if (count == 0) {\n<id><id>return true;\n<id>}\n<id>return false;\n}\n\nfunction pieceArrayRightClear() {\n<id>var count = 0;\n<id>for (let j = 0; j < 3; j++) {\n<id><id>if (pieceArray[j][2] == 9) {\n<id><id><id>count++;\n<id><id>}\n<id>}\n<id>if (count == 0) {\n<id><id>return true;\n<id>}\n<id>return false;\n}\n\n//piece and floor collision\n\nfunction convertActivePieceToNum() {\n<id>for (let j = 0; j < 20; j++) {\n<id><id>for (let i = 0; i < 10; i++) {\n<id><id><id>if (board[j][i] == 9) {\n<id><id><id><id>board[j][i] = activePiece.colourNum;\n<id><id><id>}\n<id><id>}\n<id>}\n<id>return true;\n}\n\n//function floorCollision() {\n//<id>for (let i = 0; i < 10; i++) {\n//<id><id>if (board[18][i] == 9) {\n//<id><id><id>return true;\n//<id><id>}\n//<id>}\n//<id>return false;\n//}\n\nfunction collision() {\n<id>for (let j = 0; j < 19; j++) {\n<id><id>for (let i = 0; i < 10; i++) {\n<id><id><id>if (board[j][i] == 9) {\n<id><id><id><id>if (board[j + 1][i] != 0 && board[j + 1][i] != 9) {\n<id><id><id><id><id>return true;\n<id><id><id><id>}<id><id><id><id><id> \n<id><id><id>}\n<id><id>}\n<id>}\n<id>return false;\n}\n\n//drop down 1 block\n\nfunction drop1Block() {\n<id>if (collision()) {\n<id><id>checkForFullRow();\n<id><id>updateScore(activePiece.score);\n<id><id>newBlock();\n<id>} else {\n<id><id>activePiece.y++;\n<id><id>remove9s();\n<id><id>createActivePiece();\n<id><id>renderBoard();<id><id>\n<id>}\n}\n\n// routine checking procedures\n\nfunction routineCheckingProcedures() {\n<id>checkGameEnding();\n}\n\nfunction checkGameEnding() {\n<id>for (let i = 0; i < 9; i++) {\n<id><id>if (board[2][i] != 0 && board[2][i] != 9) {\n<id><id><id>clearInterval(gameInterval);\n<id><id><id>alert('Game Over');\n<id><id><id>window.location.reload();\n<id><id><id>break;\n<id><id>}\n<id>}\n}\n\nfunction checkForFullRow() {\n<id>var count = 0;\n<id>var row = 0;\n<id>for (let j = 0; j < 19; j++) {\n<id><id>for (let i = 0; i < 10; i++) {\n<id><id><id>if (board[j][i] != 0) {\n<id><id><id><id>count++;\n<id><id><id>}\n<id><id>}\n<id><id>if (count == 10) {\n<id><id><id>row = j;\n<id><id><id>for (let i = 0; i < 9; i++) {\n<id><id><id><id>board[row][i] = 0;\n<id><id><id>}\n<id><id><id>for (let z = row - 1; z > 0; z--) {\n<id><id><id><id>for (let i = 0; i < 9; i++) {\n<id><id><id><id><id>board[z + 1][i] = board[z][i];\n<id><id><id><id>}\n<id><id><id>}\n<id><id><id>score += 10;\n<id><id><id>checkForFullRow();<id><id><id><id><id>  \n<id><id><id>break;\n<id><id>}<id><id>  \n<id><id>count = 0;\n<id>}\n\n\n<id>//if (count == 10) {\n\n<id>//} else {\n<id>//<id>return;\n<id>//}\n}\n\n// update score\n\nfunction updateScore(increment) {\n<id>var bScore = document.getElementById(<qu>bScore<qu>);\n<id>score += increment;\n<id>bScore.innerText = score;\n}\n\n//game running\n\nfunction newBlock() {\n<id>convertActivePieceToNum();\n<id>clearPieceArray(); \n<id>newPiece();\n<id>createInitialActivePiece();\n<id>renderBoard();\n}\n\nfunction game() {\n<id>drop1Block();\n<id>routineCheckingProcedures();\n}\n\nnewBlock();\nvar gameInterval = setInterval(game, 1000/ 3);\n\nbody.addEventListener('keypress', function (event) {\n<id>routineCheckingProcedures();\n<id>switch (event.key || event.which) {\n<id><id>case <qu>w<qu>: case <qu>W<qu>: case 38:\n<id><id><id>if (checkCrossedBorder()) {\n<id><id><id><id>if (activePiece.y < 18) {\n<id><id><id><id><id>rotatePiece();\n<id><id><id><id><id>createActivePiece();\n<id><id><id><id><id>renderBoard();<id><id><id><id><id>\n<id><id><id><id>}\n<id><id><id>}\n<id><id><id>break;\n<id><id>case <qu>s<qu>: case <qu>S<qu>: case 40:\n<id><id><id>drop1Block();\n<id><id><id>break;\n<id><id>case <qu>a<qu>: case <qu>A<qu>: case 37:\n<id><id><id>if (detectSideBorders(-1) && !blockHorizontalMovement(-1)) {\n<id><id><id><id>activePiece.x--;\n<id><id><id><id>remove9s();\n<id><id><id><id>createActivePiece();\n<id><id><id><id>renderBoard();\n<id><id><id>}\n<id><id><id>break;\n<id><id>case <qu>d<qu>: case <qu>D<qu>: case 39:\n<id><id><id>if (detectSideBorders(1) && !blockHorizontalMovement(1)) {\n<id><id><id><id>activePiece.x++;\n<id><id><id><id>remove9s();\n<id><id><id><id>createActivePiece();\n<id><id><id><id>renderBoard();\n<id><id><id>}\n<id><id><id>break;\n<id>}\n});\n\nbody.addEventListener('keypress', function(event) {\n<id>if (event.key == <qu>r<qu>) {\n<id><id>var count = 0;\n<id><id>for (let j = 0; j < 20; j++) {\n<id><id><id>for (let i = 0; i < 10; i++) {\n<id><id><id><id>if (board[j][i] == 9) {\n<id><id><id><id><id>count++;\n<id><id><id><id>}\n<id><id><id>}\n<id><id>}\n<id><id>console.log(count);\n<id>}\n});\n\n// personal highscore leaderboard (computer based)\n\n\n"
        },
        {
            "identifier": "clickerGameHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><script defer src=<qu>Clicker Game.js<qu>></script>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Clicker Game.css<qu>>\n<id><title>Clicker Game</title>\n</head>\n<body id=<qu>body<qu>>\n<id><div class=<qu>divInfo<qu>>\n<id><id><b id=<qu>bMoney<qu>>£0</b><br>\n<id><id><label id=<qu>lblMoneyPerSecond<qu>>£0/s</label><br>\n<id><id><button id=<qu>btnClick<qu>>+£1</button>\n<id></div>\n<id><br><br><br>\n<id><div class=<qu>divButtons<qu>>\n<id><id><b id=<qu>bClickUpgradePrice<qu> class=<qu>bUpgradePrice<qu>>Upgrade Click - £0</b>\n<id><id><b id=<qu>bPerSecondUpgradePrice<qu> class=<qu>bUpgradePrice<qu>>UpgradePerSecond - £0</b>\n<id><id><br>\n<id><id><button id=<qu>btnClickUpgrade<qu> class=<qu>btnUpgrade<qu>>+£0</button>\n<id><id><button id=<qu>btnPerSecondUpgrade<qu> class=<qu>btnUpgrade<qu>>+£0</button>\n<id></div>\n<id><button id=<qu>btnReset<qu>>Reset</button>\n</body>\n</html>\n"
        },
        {
            "identifier": "clickerGameCSS",
            "content": "#body {\n<id>background-color: #222629;\n<id>min-width: 950px;\n}\n\n/* divInfo */\n\n.divInfo {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n#bMoney {\n<id>color: #86C232;\n}\n\n#lblMoneyPerSecond {\n<id>color: #86C232;\n}\n\n#btnClick {\n<id>background: none;\n<id>border: 1px solid #86C232;\n<id>padding: 80px 60px 80px 60px;\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n<id>outline: none;\n}\n\n#btnClick:hover {\n<id>color: #86C232;\n}\n\n/* divButtons */\n\n.divButtons {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n.btnUpgrade {\n<id>background: none;\n<id>border: 1px solid #86C232;\n<id>width: 150px;\n<id>padding: 10px 5px 10px 5px;\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n<id>outline: none;\n}\n\n.btnUpgrade:hover {\n<id>color: #86C232;\n}\n\n.bUpgradePrice {\n<id>font-size: 12px;\n<id>margin: 0px 10px 0px 23px;\n<id>color: #86C232;\n}\n\n/* reset */\n\n#btnReset {\n<id>background: none;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n<id>outline: none;\n<id>position: fixed;\n<id>margin: 0px 10px 10px 0px;\n<id>right: 0;\n<id>bottom: 0;\n}\n\n#btnReset:hover {\n<id>color: #86C232;\n}\n"
        },
        {
            "identifier": "clickerGameJS",
            "content": "// decleration\n// info\nconst bMoney = document.getElementById(<qu>bMoney<qu>);\nconst lblMoneyPerSecond = document.getElementById(<qu>lblMoneyPerSecond<qu>);\nconst btnClick = document.getElementById(<qu>btnClick<qu>);\n\n// buttons\nconst bClickUpgradePrice = document.getElementById(<qu>bClickUpgradePrice<qu>);\nconst bPerSecondUpgradePrice = document.getElementById(<qu>bPerSecondUpgradePrice<qu>);\nconst btnClickUpgrade = document.getElementById(<qu>btnClickUpgrade<qu>);\nconst btnPerSecondUpgrade = document.getElementById(<qu>btnPerSecondUpgrade<qu>);\n\n// reset\nconst btnReset = document.getElementById(<qu>btnReset<qu>);\n\n// if never logged in before then set up local storage\nif (localStorage.getItem(<qu>ClickerGame-totalMoney<qu>) == null) localStorage.setItem(<qu>ClickerGame-totalMoney<qu>, <qu>0<qu>);\nif (localStorage.getItem(<qu>ClickerGame-moneyPerSecond<qu>) == null) localStorage.setItem(<qu>ClickerGame-moneyPerSecond<qu>, <qu>0<qu>);\nif (localStorage.getItem(<qu>ClickerGame-moneyPerClick<qu>) == null) localStorage.setItem(<qu>ClickerGame-moneyPerClick<qu>, <qu>1<qu>);\nif (localStorage.getItem(<qu>ClickerGame-clickUpgradePrice<qu>) == null) localStorage.setItem(<qu>ClickerGame-clickUpgradePrice<qu>, <qu>30<qu>);\nif (localStorage.getItem(<qu>ClickerGame-clickUpgrade<qu>) == null) localStorage.setItem(<qu>ClickerGame-clickUpgrade<qu>, <qu>2<qu>);\nif (localStorage.getItem(<qu>ClickerGame-perSecondUpgradePrice<qu>) == null) localStorage.setItem(<qu>ClickerGame-perSecondUpgradePrice<qu>, <qu>80<qu>);\nif (localStorage.getItem(<qu>ClickerGame-perSecondUpgrade<qu>) == null) localStorage.setItem(<qu>ClickerGame-perSecondUpgrade<qu>, <qu>1<qu>);\nif (localStorage.getItem(<qu>ClickerGame-currentTime<qu>) == null) localStorage.setItem(<qu>ClickerGame-currentTime<qu>, new Date().getTime());\n\n// fill variables with stored data\nvar totalMoney = parseInt(localStorage.getItem(<qu>ClickerGame-totalMoney<qu>));\nvar moneyPerSecond = parseInt(localStorage.getItem(<qu>ClickerGame-moneyPerSecond<qu>));\nvar moneyPerClick = parseInt(localStorage.getItem(<qu>ClickerGame-moneyPerClick<qu>));\nvar clickUpgradePrice = parseInt(localStorage.getItem(<qu>ClickerGame-clickUpgradePrice<qu>));\nvar clickUpgrade = parseInt(localStorage.getItem(<qu>ClickerGame-clickUpgrade<qu>));\nvar perSecondUpgradePrice = parseInt(localStorage.getItem(<qu>ClickerGame-perSecondUpgradePrice<qu>));\nvar perSecondUpgrade = parseInt(localStorage.getItem(<qu>ClickerGame-perSecondUpgrade<qu>));\n\n// if logged in before tell how much money was gained on while logged off\nif (localStorage.getItem(<qu>ClickerGame-totalMoney<qu>) != null) {\n<id>let previousTime = parseInt(localStorage.getItem(<qu>ClickerGame-currentTime<qu>)); // get previously stored time information\n<id>let currentTime = new Date().getTime(); // get current time\n<id>let millisecondDifference = currentTime - previousTime; // get the difference between previous & current time\n<id>let moneyToBeAdded = Math.floor((millisecondDifference / 1000) * moneyPerSecond); // calculate money to be added\n<id>alert(<qu>£<qu> + moneyToBeAdded + <qu> gained since previous login<qu>); // alert how much money gained since last login\n<id>totalMoney += moneyToBeAdded; // add money to total money\n}\n\n\nfunction updatePrices() {\n<id>// update frontend displays with updated variables\n<id>bClickUpgradePrice.innerText = <qu>Upgrade Click - £<qu> + clickUpgradePrice;\n<id>bPerSecondUpgradePrice.innerText = <qu>UpgradePerSecond - £<qu> + perSecondUpgradePrice;\n<id>btnClickUpgrade.innerText = <qu>+£<qu> + clickUpgrade;\n<id>btnPerSecondUpgrade.innerText = <qu>+£<qu> + perSecondUpgrade;\n<id>lblMoneyPerSecond.innerText = <qu>£<qu> + moneyPerSecond + <qu>/s<qu>;\n<id>btnClick.innerText = <qu>+£<qu> + moneyPerClick;\n<id>bMoney.innerText = <qu>£<qu> + totalMoney;\n\n<id>// store variable data in localstorage\n<id>localStorage.setItem(<qu>ClickerGame-totalMoney<qu>, totalMoney.toString());\n<id>localStorage.setItem(<qu>ClickerGame-moneyPerSecond<qu>, moneyPerSecond.toString());\n<id>localStorage.setItem(<qu>ClickerGame-moneyPerClick<qu>, moneyPerClick.toString());\n<id>localStorage.setItem(<qu>ClickerGame-clickUpgradePrice<qu>, clickUpgradePrice.toString());\n<id>localStorage.setItem(<qu>ClickerGame-clickUpgrade<qu>, clickUpgrade.toString());\n<id>localStorage.setItem(<qu>ClickerGame-perSecondUpgradePrice<qu>, perSecondUpgradePrice.toString());\n<id>localStorage.setItem(<qu>ClickerGame-perSecondUpgrade<qu>, perSecondUpgrade.toString());\n}\n\n// functions to update the increace buttons on click\nfunction clickUpgradeIncreace() {\n<id>let priceIncreace = Math.floor(Math.random() * (50 - 30)) + 30; // random num between 30 - 50\n<id>moneyPerClick *= 2; // double money per click\n<id>clickUpgrade *= 2; // double click upgrade\n<id>clickUpgradePrice = Math.floor(clickUpgrade * priceIncreace); // updateClickUpgradePrice to = clickUpgrade * priceIncreace\n}\n\nfunction perSecondUpgradeIncreace() {\n<id>let priceIncreace = Math.floor(Math.random() * (120 - 80)) + 80; // random num between 80 - 120\n<id>moneyPerSecond++; // increace money per second by 1\n<id>perSecondUpgrade++; // increace persecondupgrade by 1\n<id>perSecondUpgradePrice = Math.floor(perSecondUpgrade * priceIncreace); // update perSecondUpgradePrice to = perSecondUpdate * priceIncreace\n}\n\n// function to save current time to local storage\nfunction saveCurrentTime() {\n<id>let currentTime = new Date().getTime(); // get time\n<id>localStorage.setItem(<qu>ClickerGame-currentTime<qu>, currentTime); // store time\n}\n\n// every second run contents\nsetInterval(() => {\n<id>totalMoney += moneyPerSecond; // increace total money by money per second\n<id>// run subs\n<id>updatePrices();\n<id>saveCurrentTime();\n}, 1000);\n\n// on button click\nbtnClick.addEventListener(<qu>click<qu>, () => {\n<id>totalMoney += moneyPerClick; // increace total money per moneyPerClick\n<id>updatePrices();\n});\n\n// on click upgrade\nbtnClickUpgrade.addEventListener(<qu>click<qu>, () => {\n<id>if (totalMoney >= clickUpgradePrice) { // if totalMoney is greater or equal to clickUpgradePrice\n<id><id>totalMoney -= clickUpgradePrice; // deduct price from total money\n<id><id>clickUpgradeIncreace();\n<id>}\n<id>updatePrices();\n});\n\n// on persecond upgrade\nbtnPerSecondUpgrade.addEventListener(<qu>click<qu>, () => {\n<id>if (totalMoney >= perSecondUpgradePrice) { // if totalMoney is greater or equal to perSecondUpgradePrice\n<id><id>totalMoney -= perSecondUpgradePrice; // deduct price from total money\n<id><id>perSecondUpgradeIncreace();\n<id>}\n<id>updatePrices();\n});\n\n// on button click reset\nbtnReset.addEventListener(<qu>click<qu>, () => {\n<id>// reset local storage content\n<id>localStorage.setItem(<qu>ClickerGame-totalMoney<qu>, <qu>0<qu>);\n<id>localStorage.setItem(<qu>ClickerGame-moneyPerSecond<qu>, <qu>0<qu>);\n<id>localStorage.setItem(<qu>ClickerGame-moneyPerClick<qu>, <qu>1<qu>);\n<id>localStorage.setItem(<qu>ClickerGame-clickUpgradePrice<qu>, <qu>30<qu>);\n<id>localStorage.setItem(<qu>ClickerGame-clickUpgrade<qu>, <qu>2<qu>);\n<id>localStorage.setItem(<qu>ClickerGame-perSecondUpgradePrice<qu>, <qu>80<qu>);\n<id>localStorage.setItem(<qu>ClickerGame-perSecondUpgrade<qu>, <qu>1<qu>);\n\n<id>// fill variables with localstorage data\n<id>totalMoney = parseInt(localStorage.getItem(<qu>ClickerGame-totalMoney<qu>));\n<id>moneyPerSecond = parseInt(localStorage.getItem(<qu>ClickerGame-moneyPerSecond<qu>));\n<id>moneyPerClick = parseInt(localStorage.getItem(<qu>ClickerGame-moneyPerClick<qu>));\n<id>clickUpgradePrice = parseInt(localStorage.getItem(<qu>ClickerGame-clickUpgradePrice<qu>));\n<id>clickUpgrade = parseInt(localStorage.getItem(<qu>ClickerGame-clickUpgrade<qu>));\n<id>perSecondUpgradePrice = parseInt(localStorage.getItem(<qu>ClickerGame-perSecondUpgradePrice<qu>));\n<id>perSecondUpgrade = parseInt(localStorage.getItem(<qu>ClickerGame-perSecondUpgrade<qu>));\n});\n\nupdatePrices();\n"
        },
        {
            "identifier": "calendarHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Calendar.css<qu>>\n<id><script defer src=<qu>Calendar.js<qu>></script>\n<id><title>Calendar</title>\n</head>\n<body class=<qu>body<qu>>\n<id><div id=<qu>divMonthTitle<qu>>\n<id><id><b id=<qu>bMonthTitle<qu>>January</b>\n<id></div>\n\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>M</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay0<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle0<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay7<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle7<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay14<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle14<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay21<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle21<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay28<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle28<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay35<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle35<qu>></h4></div>\n<id></div>\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>T</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay1<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle1<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay8<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle8<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay15<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle15<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay22<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle22<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay29<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle29<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay36<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle36<qu>></h4></div>\n<id></div>\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>W</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay2<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle2<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay9<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle9<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay16<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle16<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay23<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle23<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay30<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle30<qu>></h4></div>\n<id></div>\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>T</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay3<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle3<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay10<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle10<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay17<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle17<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay24<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle24<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay31<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle31<qu>></h4></div>\n<id></div>\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>F</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay4<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle4<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay11<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle11<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay18<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle18<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay25<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle25<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay32<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle32<qu>></h4></div><id>\n<id></div>\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>S</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay5<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle5<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay12<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle12<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay19<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle19<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay26<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle26<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay33<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle33<qu>></h4></div>\n<id></div>\n<id><div id=<qu>divColumn<qu>>\n<id><id><label id=<qu>lblWeekDays<qu>>S</label>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay6<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle6<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay13<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle13<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay20<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle20<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay27<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle27<qu>></h4></div>\n<id><id><div class=<qu>divDay<qu> id=<qu>divDay34<qu>><h4 class=<qu>divDayTitle<qu> id=<qu>divDayTitle34<qu>></h4></div>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "calendarCSS",
            "content": ".body {\n<id>background-color: #222629;\n<id>min-width: 1000px;\n<id>width: 1000px;\n<id>text-align: center;\n<id>margin: 0 auto;\n}\n\n/* month title */\n\n#divMonthTitle {\n<id>text-align: center;\n<id>margin: 0 auto;\n<id>color: #68C232;\n<id>border-bottom: 1px solid #86C232;\n<id>padding-bottom: 5px;\n}\n\n#bMonthTitle {\n<id>font-size: 50px;\n<id>margin-left: 70px;\n}\n\n/* week days */\n\n#divWeekDays {\n<id>text-align: center;<id>\n<id>margin: 0 auto;<id>\n}\n\n#lblWeekDays {\n<id>font-size: 20px;\n<id>padding-left: 60px;\n<id>padding-right: 60px;\n<id>color: #FFFFFF;\n}\n\n/* calender days display */\n\n#divCalendarDisplay {\n<id>height: fit-content;\n}\n\n/*#divWeek {\n<id>height: fit-content;\n}*/\n\n#divColumn {\n<id>float: left;\n<id>width: 130px;\n<id>margin-left: 6.4px;\n<id>margin-right: 6.4px;\n<id>height: 700px;\n}\n\n.divDay {\n<id>width: 120px;\n<id>height: 120px;\n<id>text-align: center;\n<id>margin: 0 auto;\n<id>margin-bottom: 10px;\n<id>color: #FFFFFF;\n<id>border: 1px solid #68C232;\n}\n\n.divDayTitle {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n"
        },
        {
            "identifier": "calendarJS",
            "content": "const dateTime = new Date;\nvar daysInMonths = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nvar daysInTheMonth = daysInMonths[dateTime.getMonth()];\n\n//events\n\n// initialising calendar\nfunction init() {\n<id>var bMonthTitle = document.getElementById(<qu>bMonthTitle<qu>);<id>\n\n<id>var months = [<qu>January<qu>, <qu>Febuary<qu>, <qu>March<qu>, <qu>April<qu>, <qu>May<qu>, <qu>June<qu>, <qu>July<qu>, <qu>August<qu>, <qu>September<qu>, <qu>October<qu>, <qu>November<qu>, <qu>December<qu>];<id> \n<id>var currentMonth = months[dateTime.getMonth()];\n\n<id>// make title = current month\n<id>var currentMonth = months[dateTime.getMonth()];<id>  \n<id>bMonthTitle.innerText = currentMonth;\n\n<id>// days of the month displayed\n<id>for (let i = 1; i <= daysInTheMonth; i++) {\n<id><id>document.getElementById(<qu>divDayTitle<qu> + (i + getTheFirstDayOfMonth() - 1)).innerText = i; // getFirstDayOfMonth() - 1 because divDay's start on 0\n<id>}\n\n<id>// days not used hidden\n<id>for (let i = 0; i <= 36; i++) {\n<id><id>if (document.getElementById(<qu>divDayTitle<qu> + i).innerText == <qu><qu>) {\n<id><id><id>document.getElementById(<qu>divDay<qu> + i).style.visibility = <qu>hidden<qu>;\n<id><id>}\n\n<id>}\n\n<id>// highlighting today\n<id>document.getElementById(<qu>divDay<qu> + ((dateTime.getDate() - 1) + getTheFirstDayOfMonth())).style.borderColor = <qu>red<qu>; // -1 because date starts on 1 and calender starts on 0\n}\n\nfunction getTheFirstDayOfMonth() {\n<id>var month = dateTime.getMonth();\n<id>var year = dateTime.getFullYear();\n<id>var firstDay = new Date(year, month, 1);\n<id>var firstDayOfMonth = firstDay.getDay() - 1; //-1 because sunday = 0 so all days shifted by 1 left\n<id>if (firstDayOfMonth == -1) {\n<id><id>firstDayOfMonth = 6;\n<id>}\n<id>return firstDayOfMonth; \n}\n\ninit();\n"
        },
        {
            "identifier": "3DSimHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./3DSim.css<qu>>\n<id><script defer src=<qu>3DSim.js<qu>></script>\n<id><title>3DSim</title>\n</head>\n<body class=<qu>body<qu>>\n<id><div class=<qu>divButtons<qu>>\n<id><id><button id=<qu>btnCube<qu> class=<qu>buttons<qu>>Cube</button>\n<id><id><button id=<qu>btnTriangle<qu> class=<qu>buttons<qu>>Triangle</button>\n<id><id><button id=<qu>btnParallelogram<qu> class=<qu>buttons<qu>>Parallelogram</button>\n<id><id><button id=<qu>btnPyramid<qu> class=<qu>buttons<qu>>Pyramid</button>\n<id><id><button id=<qu>btnTrapezium<qu> class=<qu>buttons<qu>>Trapezium</button>\n<id></div><id> \n<id><div>\n<id><id><canvas id=<qu>canvas<qu>></canvas>\n<id></div>\n<id><i style=<qu>color: red;<qu>>base sides of pyramid / triangle broken, this is known</i>\n</body>\n</html>\n"
        },
        {
            "identifier": "3DSimCSS",
            "content": ".body {\n<id>background-color: #222629;\n}\n\n/* canvas */\n\n#canvas {\n<id>height:100%;\n<id>position:fixed;\n<id>width:100%;\n}\n\n/* buttons */\n\n.buttons {\n<id>background-color: #222629;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n}\n\n.buttons:hover {\n<id>color: #86C232;\n}\n\n.divButtons  {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n"
        },
        {
            "identifier": "3DSimJS",
            "content": "// code adapted from pothonprogramming - https://github.com/pothonprogramming/pothonprogramming.github.io/blob/master/content/cube/cube.html\n\n// defining shapes\nconst Point2D = function (x, y) { this.x = x; this.y = y; };\nconst Point3D = function (x, y, z) { this.x = x; this.y = y; this.z = z; };\n\n//cube\n\nconst Cube = function (x, y, z, size) {\n<id>Point3D.call(this, x, y, z);\n\n<id>this.vertices = [\n<id><id>new Point3D(x - size, y - size, z - size),\n<id><id>new Point3D(x + size, y - size, z - size),\n<id><id>new Point3D(x + size, y + size, z - size),\n<id><id>new Point3D(x - size, y + size, z - size),\n<id><id>new Point3D(x - size, y - size, z + size),\n<id><id>new Point3D(x + size, y - size, z + size),\n<id><id>new Point3D(x + size, y + size, z + size),\n<id><id>new Point3D(x - size, y + size, z + size)];\n<id>this.faces = [[0, 1, 2, 3], [0, 4, 5, 1], [1, 5, 6, 2], [3, 2, 6, 7], [0, 3, 7, 4], [4, 7, 6, 5]];\n}\n\n//cube rotation\nCube.prototype = {\n\n<id>rotateX: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let y = (p.y - this.y) * cosine - (p.z - this.z) * sine;\n<id><id><id>let z = (p.y - this.y) * sine + (p.z - this.z) * cosine;\n\n<id><id><id>p.y = y + this.y;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>},\n\n<id>rotateY: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let x = (p.z - this.z) * sine + (p.x - this.x) * cosine;\n<id><id><id>let z = (p.z - this.z) * cosine - (p.x - this.x) * sine;\n\n<id><id><id>p.x = x + this.x;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>}\n}\n\n//triangle\n\nconst Triangle = function (x, y, z, size) {\n<id>Point3D.call(this, x, y, z);\n\n<id>//pythagorus --- sq = square\n<id>var Asq = Math.pow(size, 2);\n<id>var Bsq = Math.pow(size / 2, 2);\n<id>var Csq = Asq - Bsq;\n<id>var c = Math.sqrt(Csq);\n\n<id>//SohCahToa trigonometry\n<id>var a = 86.5; //Math.cos(60) * c\n<id>var o = 149.8; //Math.sin(60) * c\n\n<id>this.vertices = [\n<id><id>new Point3D(x, y + size, z), // 0\n<id><id>new Point3D(x + c, y - (size / 2), z), // 1\n<id><id>new Point3D(x - a, y - (size / 2), z + o), // 2\n<id><id>new Point3D(x - a, y - (size / 2), z - o)]; // 3\n<id>this.faces = [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 2, 3]];\n}\n\n//triangle rotation\nTriangle.prototype = {\n\n<id>rotateX: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let y = (p.y - this.y) * cosine - (p.z - this.z) * sine;\n<id><id><id>let z = (p.y - this.y) * sine + (p.z - this.z) * cosine;\n\n<id><id><id>p.y = y + this.y;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>},\n\n<id>rotateY: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let x = (p.z - this.z) * sine + (p.x - this.x) * cosine;\n<id><id><id>let z = (p.z - this.z) * cosine - (p.x - this.x) * sine;\n\n<id><id><id>p.x = x + this.x;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>}\n}\n\n//parallelogram\n\nconst Parallelogram = function (x, y, z, size, offset) {\n<id>Point3D.call(this, x, y, z);\n\n<id>this.vertices = [\n<id><id>new Point3D(x - size, y - size, z - size),\n<id><id>new Point3D(x + size, y - size - offset, z - size),\n<id><id>new Point3D(x + size, y + size, z - size),\n<id><id>new Point3D(x - size, y + size + offset, z - size),\n<id><id>new Point3D(x - size, y - size, z + size),\n<id><id>new Point3D(x + size, y - size - offset, z + size),\n<id><id>new Point3D(x + size, y + size, z + size),\n<id><id>new Point3D(x - size, y + size + offset, z + size)];\n<id>this.faces = [[0, 1, 2, 3], [0, 4, 5, 1], [1, 5, 6, 2], [3, 2, 6, 7], [0, 3, 7, 4], [4, 7, 6, 5]];\n}\n\n//parallelogram rotation\nParallelogram.prototype = {\n\n<id>rotateX: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let y = (p.y - this.y) * cosine - (p.z - this.z) * sine;\n<id><id><id>let z = (p.y - this.y) * sine + (p.z - this.z) * cosine;\n\n<id><id><id>p.y = y + this.y;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>},\n\n<id>rotateY: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let x = (p.z - this.z) * sine + (p.x - this.x) * cosine;\n<id><id><id>let z = (p.z - this.z) * cosine - (p.x - this.x) * sine;\n\n<id><id><id>p.x = x + this.x;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>}\n}\n\n//pyramid\n\nconst Pyramid = function (x, y, z, size) {\n<id>Point3D.call(this, x, y, z);\n\n<id>//pythagorus --- sq = square\n<id>//var Asq = Math.pow(size, 2);\n<id>//var Bsq = Math.pow(size / 2, 2);\n<id>//var Csq = Asq - Bsq;\n<id>//var c = Math.sqrt(Csq);\n\n<id>//SohCahToa trigonometry\n<id>//var a = Math.cos(45) * c; // 122.47\n<id>//var o = Math.sin(45) * c; // 122.47=\n<id>var a = size / 2;\n<id>var o = size / 2;\n\n<id>this.vertices = [\n<id><id>new Point3D(x, y + size / 2, z), // 0\n<id><id>new Point3D(x + o, y - (size / 2), z + a), // 1\n<id><id>new Point3D(x - o, y - (size / 2), z + a), // 2\n<id><id>new Point3D(x - o, y - (size / 2), z - a), // 3\n<id><id>new Point3D(x + o, y - (size / 2), z - a) // 4\n<id>];\n<id>this.faces = [[0, 1, 2, 0], [0, 2, 3, 0], [0, 3, 4, 0], [0, 4, 1, 0], [1, 2, 3, 4]];\n}\n\n//pyramid rotation\nPyramid.prototype = {\n\n<id>rotateX: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let y = (p.y - this.y) * cosine - (p.z - this.z) * sine;\n<id><id><id>let z = (p.y - this.y) * sine + (p.z - this.z) * cosine;\n\n<id><id><id>p.y = y + this.y;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>},\n\n<id>rotateY: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let x = (p.z - this.z) * sine + (p.x - this.x) * cosine;\n<id><id><id>let z = (p.z - this.z) * cosine - (p.x - this.x) * sine;\n\n<id><id><id>p.x = x + this.x;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>}\n}\n\n//trapezium\n\nconst Trapezium = function (x, y, z, size, offset1, offset2) {\n<id>Point3D.call(this, x, y, z);\n\n<id>this.vertices = [\n<id><id>new Point3D(x - size, y - size, z - size),\n<id><id>new Point3D(x + size, y - size, z - size),\n<id><id>new Point3D(x + size + offset1, y + size, z - size),\n<id><id>new Point3D(x - size - offset2, y + size, z - size),\n<id><id>new Point3D(x - size, y - size, z + size),\n<id><id>new Point3D(x + size, y - size, z + size),\n<id><id>new Point3D(x + size + offset1, y + size, z + size),\n<id><id>new Point3D(x - size - offset2, y + size, z + size)];\n<id>this.faces = [[0, 1, 2, 3], [0, 4, 5, 1], [1, 5, 6, 2], [3, 2, 6, 7], [0, 3, 7, 4], [4, 7, 6, 5]];\n}\n\n//trapezium rotation\nTrapezium.prototype = {\n\n<id>rotateX: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let y = (p.y - this.y) * cosine - (p.z - this.z) * sine;\n<id><id><id>let z = (p.y - this.y) * sine + (p.z - this.z) * cosine;\n\n<id><id><id>p.y = y + this.y;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>},\n\n<id>rotateY: function (radian) {\n<id><id>var cosine = Math.cos(radian);\n<id><id>var sine = Math.sin(radian);\n\n<id><id>for (let i = this.vertices.length - 1; i >= 0; --i) {\n<id><id><id>let p = this.vertices[i];\n<id><id><id>let x = (p.z - this.z) * sine + (p.x - this.x) * cosine;\n<id><id><id>let z = (p.z - this.z) * cosine - (p.x - this.x) * sine;\n\n<id><id><id>p.x = x + this.x;\n<id><id><id>p.z = z + this.z;\n<id><id>}\n<id>}\n}\n\n//-------------------------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------------------------\n// main variable decleration\n//-------------------------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------------------------\n\nvar canvas = document.getElementById(<qu>canvas<qu>);\nvar context = canvas.getContext(<qu>2d<qu>);\nvar pointer = new Point2D(0, 0);\n\nvar cube = new Cube(0, 0, 400, 150);\nvar triangle = new Triangle(0, 0, 300, 200);\nvar parallelogram = new Parallelogram(0, 0, 400, 150, 100);\nvar pyramid = new Pyramid(0, 0, 300, 200);\nvar trapezium = new Trapezium(0, 0, 400, 150, 80, 150);\n\nvar mouseDown = false;\n\nvar height = document.documentElement.clientHeight;\nvar width = document.documentElement.clientWidth;\n\nfunction project(points3d, width, height) {\n<id>var points2d = new Array(points3d.length);\n<id>var focal_length = 200;\n\n<id>for (let i = points3d.length - 1; i >= 0; --i) {\n<id><id>let p = points3d[i];\n<id><id>let x = p.x * (focal_length / p.z) + width * 0.5;\n<id><id>let y = p.y * (focal_length / p.z) + height * 0.5;\n\n<id><id>points2d[i] = new Point2D(x, y);\n<id>}\n\n<id>return points2d;\n}\n\n// main loops\n\nfunction loopCube() {\n<id>window.requestAnimationFrame(loopCube);\n\n<id>height = document.documentElement.clientHeight;\n<id>width = document.documentElement.clientWidth;\n<id>context.canvas.height = height;\n<id>context.canvas.width = width;\n<id>context.strokeStyle = <qu>black<qu>;\n\n<id>cube.rotateX(pointer.y * 0.0001);\n<id>cube.rotateY(-pointer.x * 0.0001);\n\n\n<id>context.fillStyle = <qu>blue<qu>;\n\n<id>var vertices = project(cube.vertices, width, height);\n<id>for (let i = cube.faces.length - 1; i >= 0; --i) {\n<id><id>let face = cube.faces[i];\n<id><id>let p1 = cube.vertices[face[0]];\n<id><id>let p2 = cube.vertices[face[1]];\n<id><id>let p3 = cube.vertices[face[2]];\n<id><id>let v1 = new Point3D(p2.x - p1.x, p2.y - p1.y, p2.z - p1.z);\n<id><id>let v2 = new Point3D(p3.x - p1.x, p3.y - p1.y, p3.z - p1.z);\n<id><id>let n = new Point3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n<id><id>if (-p1.x * n.x + -p1.y * n.y + -p1.z * n.z <= 0) {\n<id><id><id>context.beginPath();\n<id><id><id>context.moveTo(vertices[face[0]].x, vertices[face[0]].y);\n<id><id><id>context.lineTo(vertices[face[1]].x, vertices[face[1]].y);\n<id><id><id>context.lineTo(vertices[face[2]].x, vertices[face[2]].y);\n<id><id><id>context.lineTo(vertices[face[3]].x, vertices[face[3]].y);\n<id><id><id>context.closePath();\n<id><id><id>context.fill();\n<id><id><id>context.stroke();\n<id><id>}\n<id>}\n}\n\nfunction loopTriangle() {\n<id>window.requestAnimationFrame(loopTriangle);\n\n<id>height = document.documentElement.clientHeight;\n<id>width = document.documentElement.clientWidth;\n<id>context.canvas.height = height;\n<id>context.canvas.width = width;\n<id>context.strokeStyle = <qu>black<qu>;\n\n<id>triangle.rotateX(pointer.y * 0.0001);\n<id>triangle.rotateY(-pointer.x * 0.0001);\n\n<id>context.fillStyle = <qu>blue<qu>;\n\n<id>var vertices = project(triangle.vertices, width, height);\n<id>for (let i = triangle.faces.length - 1; i >= 0; --i) {\n<id><id>let face = triangle.faces[i];\n<id><id>let p1 = triangle.vertices[face[0]];\n<id><id>let p2 = triangle.vertices[face[1]];\n<id><id>let p3 = triangle.vertices[face[2]];\n<id><id>let v1 = new Point3D(p2.x - p1.x, p2.y - p1.y, p2.z - p1.z);\n<id><id>let v2 = new Point3D(p3.x - p1.x, p3.y - p1.y, p3.z - p1.z);\n<id><id>let n = new Point3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n<id><id>if (-p1.x * n.x + -p1.y * n.y + -p1.z * n.z <= 0) {\n<id><id><id>context.beginPath();\n<id><id><id>context.moveTo(vertices[face[0]].x, vertices[face[0]].y);\n<id><id><id>context.lineTo(vertices[face[1]].x, vertices[face[1]].y);\n<id><id><id>context.lineTo(vertices[face[2]].x, vertices[face[2]].y);\n<id><id><id>context.closePath();\n<id><id><id>context.fill();\n<id><id><id>context.stroke();\n<id><id>}\n<id>}\n}\n\nfunction loopParallelogram() {\n<id>window.requestAnimationFrame(loopParallelogram);\n\n<id>height = document.documentElement.clientHeight;\n<id>width = document.documentElement.clientWidth;\n<id>context.canvas.height = height;\n<id>context.canvas.width = width;\n<id>context.strokeStyle = <qu>black<qu>;\n\n<id>parallelogram.rotateX(pointer.y * 0.0001);\n<id>parallelogram.rotateY(-pointer.x * 0.0001);\n\n<id>context.fillStyle = <qu>blue<qu>;\n\n<id>var vertices = project(parallelogram.vertices, width, height);\n<id>for (let i = parallelogram.faces.length - 1; i >= 0; --i) {\n<id><id>let face = parallelogram.faces[i];\n<id><id>let p1 = parallelogram.vertices[face[0]];\n<id><id>let p2 = parallelogram.vertices[face[1]];\n<id><id>let p3 = parallelogram.vertices[face[2]];\n<id><id>let v1 = new Point3D(p2.x - p1.x, p2.y - p1.y, p2.z - p1.z);\n<id><id>let v2 = new Point3D(p3.x - p1.x, p3.y - p1.y, p3.z - p1.z);\n<id><id>let n = new Point3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n<id><id>if (-p1.x * n.x + -p1.y * n.y + -p1.z * n.z <= 0) {\n<id><id><id>context.beginPath();\n<id><id><id>context.moveTo(vertices[face[0]].x, vertices[face[0]].y);\n<id><id><id>context.lineTo(vertices[face[1]].x, vertices[face[1]].y);\n<id><id><id>context.lineTo(vertices[face[2]].x, vertices[face[2]].y);\n<id><id><id>context.lineTo(vertices[face[3]].x, vertices[face[3]].y);\n<id><id><id>context.closePath();\n<id><id><id>context.fill();\n<id><id><id>context.stroke();\n<id><id>}\n<id>}\n}\n\nfunction loopPyramid() {\n<id>window.requestAnimationFrame(loopPyramid);\n\n<id>height = document.documentElement.clientHeight;\n<id>width = document.documentElement.clientWidth;\n<id>context.canvas.height = height;\n<id>context.canvas.width = width;\n<id>context.strokeStyle = <qu>black<qu>;\n\n<id>pyramid.rotateX(pointer.y * 0.0001);\n<id>pyramid.rotateY(-pointer.x * 0.0001);\n\n<id>context.fillStyle = <qu>blue<qu>;\n\n<id>var vertices = project(pyramid.vertices, width, height);\n<id>for (let i = pyramid.faces.length - 1; i >= 0; --i) {\n<id><id>let face = pyramid.faces[i];\n<id><id>let p1 = pyramid.vertices[face[0]];\n<id><id>let p2 = pyramid.vertices[face[1]];\n<id><id>let p3 = pyramid.vertices[face[2]];\n<id><id>let v1 = new Point3D(p2.x - p1.x, p2.y - p1.y, p2.z - p1.z);\n<id><id>let v2 = new Point3D(p3.x - p1.x, p3.y - p1.y, p3.z - p1.z);\n<id><id>let n = new Point3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n<id><id>if (-p1.x * n.x + -p1.y * n.y + -p1.z * n.z <= 0) {\n<id><id><id>context.beginPath();\n<id><id><id>context.moveTo(vertices[face[0]].x, vertices[face[0]].y);\n<id><id><id>context.lineTo(vertices[face[1]].x, vertices[face[1]].y);\n<id><id><id>context.lineTo(vertices[face[2]].x, vertices[face[2]].y);\n<id><id><id>context.lineTo(vertices[face[3]].x, vertices[face[3]].y);\n<id><id><id>context.closePath();\n<id><id><id>context.fill();\n<id><id><id>context.stroke();\n<id><id>}\n<id>}\n}\n\nfunction loopTrapezium() {\n<id>window.requestAnimationFrame(loopTrapezium);\n\n<id>height = document.documentElement.clientHeight;\n<id>width = document.documentElement.clientWidth;\n<id>context.canvas.height = height;\n<id>context.canvas.width = width;\n<id>context.strokeStyle = <qu>black<qu>;\n\n<id>trapezium.rotateX(pointer.y * 0.0001);\n<id>trapezium.rotateY(-pointer.x * 0.0001);\n\n<id>context.fillStyle = <qu>blue<qu>;\n\n<id>var vertices = project(trapezium.vertices, width, height);\n<id>for (let i = trapezium.faces.length - 1; i >= 0; --i) {\n<id><id>let face = trapezium.faces[i];\n<id><id>let p1 = trapezium.vertices[face[0]];\n<id><id>let p2 = trapezium.vertices[face[1]];\n<id><id>let p3 = trapezium.vertices[face[2]];\n<id><id>let v1 = new Point3D(p2.x - p1.x, p2.y - p1.y, p2.z - p1.z);\n<id><id>let v2 = new Point3D(p3.x - p1.x, p3.y - p1.y, p3.z - p1.z);\n<id><id>let n = new Point3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n<id><id>if (-p1.x * n.x + -p1.y * n.y + -p1.z * n.z <= 0) {\n<id><id><id>context.beginPath();\n<id><id><id>context.moveTo(vertices[face[0]].x, vertices[face[0]].y);\n<id><id><id>context.lineTo(vertices[face[1]].x, vertices[face[1]].y);\n<id><id><id>context.lineTo(vertices[face[2]].x, vertices[face[2]].y);\n<id><id><id>context.lineTo(vertices[face[3]].x, vertices[face[3]].y);\n<id><id><id>context.closePath();\n<id><id><id>context.fill();\n<id><id><id>context.stroke();\n<id><id>}\n<id>}\n}\n\nconst btnCube = document.getElementById(<qu>btnCube<qu>);\nconst btnTriangle = document.getElementById(<qu>btnTriangle<qu>);\nconst btnParallelogram = document.getElementById(<qu>btnParallelogram<qu>);\nconst btnPyramid = document.getElementById(<qu>btnPyramid<qu>);\nconst btnTrapezium = document.getElementById(<qu>btnTrapezium<qu>);\n\nloopCube();\n\n// event handlers\n\nbtnCube.addEventListener(<qu>click<qu>, () => {\n<id>loopCube();\n});\nbtnTriangle.addEventListener(<qu>click<qu>, () => {\n<id>loopTriangle();\n});\nbtnParallelogram.addEventListener(<qu>click<qu>, () => {\n<id>loopParallelogram();\n});\nbtnPyramid.addEventListener(<qu>click<qu>, () => {\n<id>loopPyramid();\n});\nbtnTrapezium.addEventListener(<qu>click<qu>, () => {\n<id>loopTrapezium();\n});\n\n// rotation movements\n\ncanvas.addEventListener(<qu>mousemove<qu>, (event) => {\n<id>if (mouseDown) {\n<id><id>pointer.x = event.pageX - (width / 2);\n<id><id>pointer.y = event.pageY - (height / 2);\n<id>}\n});\n\ncanvas.addEventListener(<qu>mousedown<qu>, () => {\n<id>canvas.style.cursor = <qu>pointer<qu>;\n<id>mouseDown = true;\n<id>pointer.x = event.pageX - (width / 2);\n<id>pointer.y = event.pageY - (height / 2);\n});\n\ncanvas.addEventListener(<qu>mouseup<qu>, () => {\n<id>canvas.style.cursor = <qu>default<qu>;\n<id>mouseDown = false;\n<id>pointer.x = 0;\n<id>pointer.y = 0;\n});\n"
        },
        {
            "identifier": "pickerHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Picker.css<qu>>\n<id><script defer src=<qu>Picker.js<qu>></script>\n<id><title>Picker</title>\n</head>\n<body class=<qu>body<qu>>\n<id><div style=<qu>margin: 0 auto; text-align: center;<qu>>\n<id><id><b class=<qu>bTitle<qu>>Picker</b>\n<id></div>\n<id><br>\n<id><div class=<qu>divAdd<qu>>\n<id><id><label style=<qu>font-size: 20px; color: #FFFFFF;<qu>>Choices:</label>\n<id><id><label id=<qu>lblChoices<qu>>0</label>\n<id><id><button id=<qu>btnAddChoice<qu>>+</button>\n<id><id><button id=<qu>btnClear<qu>>Clear</button>\n<id><id><br><br>\n<id><id><button id=<qu>btnPick<qu>>Pick</button>\n<id></div>\n<id><br>\n<id><div class=<qu>divResult<qu>>\n<id><id><label id=<qu>lblResult<qu>></label>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "pickerCSS",
            "content": ".body {\n<id>background-color: #222629;\n}\n\n/* title */\n\n.divTitle {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n.bTitle {\n<id>font-size: 75px;\n<id>color: #86C232;\n}\n\n/* choices */\n\n.divAdd {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n#lblChoices {\n<id>font-size: 22px;\n<id>padding-right: 20px;\n<id>color: #FFFFFF;\n}\n\n#btnAddChoice {\n<id>background-color: #222629;\n<id>color: #FFFFFF;\n<id>border: 1px solid #86C232;\n<id>cursor: pointer;\n<id>font-size: 20px;\n<id>width: 30px;\n<id>height: 30px;\n}\n\n#btnAddChoice:hover {\n<id>color: #86C232;\n}\n\n#btnClear {\n<id>background-color: #222629;\n<id>color: #FFFFFF;\n<id>border: 1px solid #86C232;\n<id>cursor: pointer;\n<id>font-size: 20px;\n<id>height: 30px;\n}\n\n#btnClear:hover {\n<id>color: #86C232;\n}\n\n#btnPick {\n<id>background-color: #222629;\n<id>color: #FFFFFF;\n<id>border: 1px solid #86C232;\n<id>cursor: pointer;\n<id>width: 300px;\n}\n\n#btnPick:hover {\n<id>color: #86C232;\n}\n\n/* result */\n\n.divResult {\n<id>margin: 0 auto;\n<id>text-align: center;\n}\n\n#lblResult {\n<id>font-size: 30px;\n<id>color: #FFFFFF;\n}\n"
        },
        {
            "identifier": "pickerJS",
            "content": "const lblChoices = document.getElementById(<qu>lblChoices<qu>);\nconst btnAddChoice = document.getElementById(<qu>btnAddChoice<qu>);\nconst btnClear = document.getElementById(<qu>btnClear<qu>);\nconst btnPick = document.getElementById(<qu>btnPick<qu>);\nconst lblResult = document.getElementById(<qu>lblResult<qu>);\n\nvar choices = [];\n\nfunction addChoice() {\n<id>choices.push(prompt(<qu>Please add a choice<qu>));\n<id>lblChoices.innerText = choices.length;\n}\n\nfunction clearChoices() {\n<id>choices = [];\n<id>lblChoices.innerText = 0;\n<id>lblResult.innerText = <qu><qu>;\n}\n\nfunction pick() {\n<id>var rnd = Math.floor(Math.random() * choices.length);\n<id>if (choices.length == 0) {\n<id><id>lblResult.innerText = <qu>No Choices<qu>;\n<id><id>return;\n<id>}\n<id>lblResult.innerText = choices[rnd]; \n}\n\n//event handler\n\nbtnAddChoice.addEventListener(<qu>click<qu>, () => {\n<id>addChoice();\n});\n\nbtnClear.addEventListener(<qu>click<qu>, () => {\n<id>clearChoices();\n});\n\nbtnPick.addEventListener(<qu>click<qu>, () => {\n<id>pick();\n});\n"
        },
        {
            "identifier": "reactionTimeHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Reaction Time.css<qu>>\n<id><script defer src=<qu>Reaction Time.js<qu>></script>\n<id><title>Reaction Time</title>\n</head>\n<body class=<qu>body<qu>>\n\n<id><div id=<qu>divMenu<qu>>\n<id><id><b class=<qu>bMenuTitle<qu>>Reaction Time Test</b><br>\n<id><id><label class=<qu>lblMenuDesc<qu>>When the screen flashes from red to green click to calculate reaction time</label><br><br>\n<id><id><button id=<qu>btnStart<qu>>Start</button>\n<id></div>\n\n<id><div id=<qu>divCanvas<qu>>\n<id><id><b class=<qu>bCanvasTitle<qu>>Reaction Time Test</b><br>\n<id><id><canvas id=<qu>canvas<qu>></canvas><id><id>\n<id></div>\n\n<id><div id=<qu>divResult<qu>>\n<id><id><b class=<qu>bResultTitle<qu>>Reaction Time Test</b><br>\n<id><id><label id=<qu>lblResultDesc<qu>>Your reaction time was 0ms</label><br><br>\n<id><id><button id=<qu>btnAgain<qu>>Try Again</button>\n<id></div>\n</body>\n</html>\n"
        },
        {
            "identifier": "reactionTimeCSS",
            "content": ".body {\n<id>background-color: #222629;\n}\n\n/* menu */\n\n#divMenu {\n<id>width: 100%;\n<id>text-align: center;\n<id>position: absolute;\n<id>z-index: 3;\n}\n\n.bMenuTitle {\n<id>font-size: 30px;\n<id>color: #86C232;\n}\n\n.lblMenuDesc {\n<id>font-size: 20px;\n<id>color: #86C232;\n}\n\n#btnStart {\n<id>background-color: #222629;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n<id>font-size: 15px;\n<id>width: 80px;\n<id>height: 30px;\n}\n\n#btnStart:hover {\n<id>color: #86C232;\n}\n\n/* result */\n\n#divResult {\n<id>width: 100%;\n<id>text-align: center;\n<id>position: absolute;\n<id>z-index: 1;\n<id>color: #86C232;\n<id>visibility: hidden;\n}\n\n.bResultTitle {\n<id>font-size: 30px;\n<id>color: #86C232;\n}\n\n#lblResultDesc {\n<id>font-size: 20px;\n<id>color: #86C232;\n}\n\n#btnAgain {\n<id>background-color: #222629;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n<id>font-size: 15px;\n<id>width: 80px;\n<id>height: 30px;\n}\n\n#btnAgain:hover {\n<id>color: #86C232;\n}\n\n/* canvas */\n\n.bCanvasTitle {\n<id>font-size: 30px;\n<id>color: #86C232;\n}\n\n#divCanvas {\n<id>width: 100%;\n<id>text-align: center;\n<id>position: absolute;\n<id>z-index: 2;\n\n<id>visibility: hidden;\n}\n\n#canvas {\n<id>background-color: red;\n<id>width: 80%;\n<id>height: 80%;\n<id>cursor: pointer;\n}\n"
        },
        {
            "identifier": "reactionTimeJS",
            "content": "const divMenu = document.getElementById(<qu>divMenu<qu>);\nconst divCanvas = document.getElementById(<qu>divCanvas<qu>);\nconst divResult = document.getElementById(<qu>divResult<qu>);\nconst btnStart = document.getElementById(<qu>btnStart<qu>);\nconst btnAgain = document.getElementById(<qu>btnAgain<qu>);\n\nconst canvas = document.getElementById(<qu>canvas<qu>);\nconst lblResultDesc = document.getElementById(<qu>lblResultDesc<qu>);\n\nvar timeTaken = 0;\nvar startTime = null;\nfunction start() {\n<id>divMenu.style.visibility = <qu>hidden<qu>;\n<id>divCanvas.style.visibility = <qu>visible<qu>;\n\n<id>setTimeout( () => {\n<id><id>canvas.style.backgroundColor = <qu>green<qu>;\n<id><id>startTime = Date.now();\n<id>}, Math.random() * 5000);\n}\n\nfunction clicked() {\n<id>timeTaken = Date.now() - startTime;\n<id>divCanvas.style.visibility = <qu>hidden<qu>;\n<id>divResult.style.visibility = <qu>visible<qu>;\n<id>if (canvas.style.backgroundColor == <qu>green<qu>) {\n<id><id>lblResultDesc.innerText = <qu>Your reaction time was <qu>+ timeTaken +<qu>ms<qu>;<id><id>\n<id>} else {\n<id><id>lblResultDesc.innerText = <qu>Your reaction time was too early<qu>;<id><id>\n<id>}\n}\n\nfunction again() {\n<id>window.location.reload();\n}\n\ncanvas.addEventListener(<qu>click<qu>, clicked);\nbtnStart.addEventListener(<qu>click<qu>, start);\nbtnAgain.addEventListener(<qu>click<qu>, again);\n"
        },
        {
            "identifier": "codeHTML",
            "content": "<!DOCTYPE html>\n<html lang=<qu>en<qu>>\n<head>\n<id><meta charset=<qu>UTF-8<qu>>\n<id><meta name=<qu>viewport<qu> content=<qu>width=device-width, initial-scale=1.0<qu>>\n<id><script defer src=<qu>Code.js<qu>></script>\n<id><link rel=<qu>stylesheet<qu> type=<qu>text/css<qu> href=<qu>./Code.css<qu>>\n<id><title>Code</title>\n</head>\n<body id=<qu>body<qu>>\n<id><div class=<qu>divWebsiteContent<qu>>\n<id><id><div class=<qu>divWebsiteContentTitle<qu>>\n<id><id><id><label class=<qu>lblWebsiteContentTitle<qu>>Content</label> \n<id><id></div>\n<id><id><div class=<qu>divContentItems<qu>>\n<id><id><id><a onclick=<qu>selectFileName('index');<qu>>Index</a>\n<id><id><id><a onclick=<qu>selectFileName('draw')<qu>>Draw</a>\n<id><id><id><a onclick=<qu>selectFileName('nAndC')<qu>>Noughts & Crosses</a>\n<id><id><id><a onclick=<qu>selectFileName('gridGame')<qu>>Grid Game</a>\n<id><id><id><a onclick=<qu>selectFileName('pong')<qu>>Pong</a>\n<id><id><id><a onclick=<qu>selectFileName('snake')<qu>>Snake</a>\n<id><id><id><a onclick=<qu>selectFileName('flappyBirb')<qu>>Flappy Birb</a>\n<id><id><id><a onclick=<qu>selectFileName('tetris')<qu>>Tetris</a>\n<id><id><id><a onclick=<qu>selectFileName('calendar')<qu>>Calendar</a>\n<id><id><id><a onclick=<qu>selectFileName('3DSim')<qu>>3D Simulator</a>\n<id><id><id><a onclick=<qu>selectFileName('picker')<qu>>Picker</a>\n<id><id><id><a onclick=<qu>selectFileName('reactionTime')<qu>>Reaction Time</a>\n<id><id><id><a onclick=<qu>selectFileName('code')<qu>>Code</a>\n<id><id><id><a onclick=<qu>selectFileName('about')<qu>>About</a>\n<id><id></div>\n<id><id><div class=<qu>divLanguageSelect<qu>>\n<id><id><id><button onclick=<qu>selectFileType('CSS')<qu>>CSS</button>\n<id><id><id><button onclick=<qu>selectFileType('HTML')<qu>>HTML</button>\n<id><id><id><button onclick=<qu>selectFileType('JS')<qu>>JS</button>\n<id><id></div>\n<id></div>\n<id><b id=<qu>bDisplayedCodeTitle<qu>>indexHTML</b>\n<id><textarea id=<qu>txtArea<qu> cols=<qu>1000<qu> rows=<qu>5000<qu> readonly></textarea>\n</body>\n</html>\n"
        },
        {
            "identifier": "codeCSS",
            "content": "#body {\n<id>background-color: #222629;\n<id>min-height: 400px;\n<id>margin: 0;\n}\n\n/* website content side menu (flaot left) */\n\n.divWebsiteContent {\n<id>height: 100%;\n<id>width: 250px;\n<id>position: absolute;\n<id>background-color: #222629;\n<id>border-right: 1px solid #86C232;\n<id>z-index: 2;\n}\n\n.divWebsiteContentTitle {\n<id>position: relative;\n<id>width: 220px;\n<id>top: 20px;\n<id>left: 20px;\n<id>padding-bottom: 10px;\n<id>border-bottom: 1px solid #86C232;\n}\n\n.lblWebsiteContentTitle {\n<id>font-size: 25px;\n<id>position: relative;\n<id>color: #FFFFFF;\n}\n\n.divContentItems {\n<id>position: relative;\n<id>top: 20px;\n<id>left: 30px;\n<id>display: block;\n}\n\n.divContentItems a {\n<id>color: #FFFFFF;\n<id>cursor: pointer;\n<id>text-decoration: none;\n<id>width: 150px;\n<id>padding: 12px 16px;\n<id>display: block;\n}\n\n.divContentItems a:hover {\n<id>color: #86C232;\n}\n\n/* language select side menu (top right) */\n\n.divLanguageSelect {\n<id>position: fixed;\n<id>bottom: 0;\n<id>z-index: 2;\n<id>width: 250px;\n<id>height: 50px;\n<id>border-top: 1px solid #86C232;\n<id>background-color: #222629;\n}\n\n.divLanguageSelect button {\n<id>position: relative;\n<id>width: 60px;\n<id>height: 20px;\n<id>margin-left: 15px;\n<id>margin-top: 15px;\n<id>background-color: #222629;\n<id>cursor: pointer;\n<id>color: #FFFFFF;\n<id>border: 1px solid #86C232;\n}\n\n.divLanguageSelect button:hover {\n<id>color: #86C232;\n}\n\n/* code display */\n\n#bDisplayedCodeTitle {\n<id>position: absolute;\n<id>left: 270px;\n<id>font-size: 40px;\n<id>color: #FFFFFF;\n<id>z-index: 2;\n}\n\n#txtArea {\n<id>position: relative;\n<id>box-sizing: border-box;\n<id>float: right;\n<id>top: 50px;\n<id>right: 5px;\n<id>z-index: 1;\n<id>/*width: 86.35%;*/\n<id>height: 860px;\n<id>resize: none;\n<id>background-color: #222629;\n<id>border: 1px solid #86C232;\n<id>color: #FFFFFF;\n}\n"
        },
        {
            "identifier": "codeJS",
            "content": "function resizeWindow() {\n<id>let width = (window.innerWidth - 261) + <qu>px<qu>;\n<id>document.getElementById(<qu>txtArea<qu>).style.width = width;\n}\n\n// event listeners for when window resize is needed\nwindow.addEventListener(<qu>resize<qu>, resizeWindow);\nwindow.addEventListener(<qu>load<qu>, resizeWindow);\ndocument.addEventListener(<qu>fullscreenchange<qu>, resizeWindow);\nwindow.addEventListener(<qu>focus<qu>, resizeWindow);\n\n// display file\n\nconst txtArea = document.getElementById(<qu>txtArea<qu>);\nconst bDisplayedCodeTitle = document.getElementById(<qu>bDisplayedCodeTitle<qu>);\n\n// create initial identifier\nvar name = <qu>index<qu>;\nvar type = <qu>HTML<qu>;\nvar identifier = name + type;\n\nfunction selectFileName(selectedName) {\n<id>name = selectedName;\n<id>identifier = name + type;\n<id>bDisplayedCodeTitle.innerText = identifier;\n<id>getData();\n}\n\nfunction selectFileType(selectedType) {\n<id>type = selectedType;\n<id>identifier = name + type;\n<id>bDisplayedCodeTitle.innerText = identifier;\n<id>getData();\n}\n\nfunction getData() {\n<id>// fetch json from Code.json\n<id>fetch('./Code.json')\n<id>.then(response => {\n<id><id>// handle responce (dont 100% know how this works)\n<id><id>console.log(response);\n<id><id>return response.json();\n<id>}).then(data => {\n<id><id>// json data can be handled here\n<id><id>console.log(data);\n<id><id>// loop through all of json finding correct identifier\n<id><id>for (let i = 0; i < data.code.length; i++) {\n<id><id><id>if (data.code[i].identifier == identifier) {\n<id><id><id><id>// format code\n<id><id><id><id>let fileContent = data.code[i].content;\n<id><id><id><id>function replaceAll(string, search, replace) {\n<id><id><id><id><id>return string.split(search).join(replace);\n<id><id><id><id>}\n<id><id><id><id>// format properly\n<id><id><id><id>fileContent = replaceAll(fileContent, <qu><qu><qu>, '<qu>');\n<id><id><id><id>fileContent = replaceAll(fileContent, <qu><id><qu>, <qu><id><qu>);\n<id><id><id><id>// paste code into text area\n<id><id><id><id>txtArea.value = fileContent;\n<id><id><id><id>return;\n<id><id><id>}\n<id><id>}\n<id><id>console.log(data.code[0].content)\n<id>}).catch(error => {\n<id><id>console.log(error);\n<id>});   \n}\n\ngetData();\n"
        },
        {
            "identifier": "aboutHTML",
            "content": "About section to be created soon"
        },
        {
            "identifier": "aboutCSS",
            "content": "About section to be created soon"
        },
        {
            "identifier": "aboutJS",
            "content": "About section to be created soon"
        }
    ]
}